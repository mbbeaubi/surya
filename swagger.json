{
    "openapi": "3.0.3",
    "info": {
        "description": "Data X-Ray API documentation",
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "title": "Data X-Ray API",
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "https://34.142.24.252",
            "description": "API Doc Server"
        }
    ],
    "paths": {
        "/api/account": {
            "get": {
                "operationId": "getAccount",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            },
            "post": {
                "operationId": "saveAccount",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/account/change-password": {
            "post": {
                "operationId": "changePassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChangeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/account/reset-password/finish": {
            "post": {
                "operationId": "finishPasswordReset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyAndPasswordVM"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/account/reset-password/init": {
            "post": {
                "operationId": "requestPasswordReset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/activate": {
            "get": {
                "operationId": "activateAccount",
                "parameters": [
                    {
                        "in": "query",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/admin-generate-reset-key/{username}": {
            "put": {
                "operationId": "adminGeneratedResetKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/authenticate": {
            "get": {
                "operationId": "isAuthenticated",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            },
            "post": {
                "operationId": "authorize",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginVM"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/bulk-tag-actions/add": {
            "post": {
                "description": "Forwards a search request, formatted using Data Xray JSON query format, over indexed files\nstored in the Data Xray's Elasticsearch database, to document-ingester in order to add\ntags to datasources.\n",
                "operationId": "addBulkTagsInDatasources",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkTagRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful add"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Invalid list of datasource ids"
                    }
                },
                "summary": "Adds tags to datasources in elasticsearch",
                "tags": [
                    "bulk-tag-action-resource"
                ]
            }
        },
        "/api/bulk-tag-actions/remove": {
            "post": {
                "description": "Forwards a search request, formatted using Data Xray JSON query format, over indexed files\nstored in the Data Xray's Elasticsearch database, to document-ingester in order to remove\ntags from datasources.\n",
                "operationId": "removeBulkTagsFromDatasources",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkTagRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful remove"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Invalid list of datasource ids"
                    }
                },
                "summary": "Removes tags from datasources in elasticsearch",
                "tags": [
                    "bulk-tag-action-resource"
                ]
            }
        },
        "/api/bulk-tag-actions/status": {
            "get": {
                "description": "Returns the bulk tag actions queue or empty list if nothing is found",
                "operationId": "getBulkTagActions",
                "parameters": [
                    {
                        "description": "the maximum number of datasources to be included in the response",
                        "in": "query",
                        "name": "datasourceListLimit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 3
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkTagActionResponse"
                                }
                            }
                        },
                        "description": "Map of results"
                    },
                    "403": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkTagActionResponse"
                                }
                            }
                        },
                        "description": "Authentication error"
                    }
                },
                "summary": "Bulk tag actions queue",
                "tags": [
                    "bulk-tag-action-resource"
                ]
            }
        },
        "/api/bulk-tag-actions/{id}": {
            "delete": {
                "description": "Deletes the bulk tag action",
                "operationId": "deleteBulkTagAction",
                "parameters": [
                    {
                        "description": "the bulk tag action that will be deleted",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "delete is successful"
                    },
                    "400": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "the bulk tag action cannot be deleted, e.g. is running"
                    },
                    "403": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Authentication error"
                    },
                    "404": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "the bulk tag action doesn't exist"
                    }
                },
                "summary": "Deletes the bulk tag action, if it is not in progress",
                "tags": [
                    "bulk-tag-action-resource"
                ]
            }
        },
        "/api/bulk-tag-actions/{id}/datasources": {
            "get": {
                "description": "Returns the bulk tag action full list of datasources",
                "operationId": "getBulkTagActionDatasources",
                "parameters": [
                    {
                        "description": "the bulk tag action for which the assigned list of datasources will be retrieved",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Map of results"
                    },
                    "403": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Authentication error"
                    },
                    "404": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "the bulk tag action doesn't exist or does not have any active datasources assigned"
                    }
                },
                "summary": "Bulk tag action full list of datasources",
                "tags": [
                    "bulk-tag-action-resource"
                ]
            }
        },
        "/api/casefile-entries": {
            "get": {
                "operationId": "getAllCasefileEntries",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CasefileEntryDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            },
            "put": {
                "operationId": "updateCasefileEntry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileEntryRequestDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileEntryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            }
        },
        "/api/casefile-entries/multiple": {
            "post": {
                "operationId": "createCasefileEntries",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileEntriesDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileEntriesDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            }
        },
        "/api/casefile-entries/remove-tags": {
            "put": {
                "operationId": "removeTags",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileEntryTagRequestDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileEntryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            }
        },
        "/api/casefile-entries/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_11",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusCasefileEntryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            }
        },
        "/api/casefile-entries/{id}": {
            "delete": {
                "operationId": "deleteCasefileEntry",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            },
            "get": {
                "operationId": "getCasefileEntry",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileEntryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-entry-resource"
                ]
            }
        },
        "/api/casefile-users": {
            "get": {
                "operationId": "getAllCasefileUsers",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CasefileUserDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            },
            "post": {
                "operationId": "createCasefileUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileUserDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileUserDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            },
            "put": {
                "operationId": "updateCasefileUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileUserDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileUserDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            }
        },
        "/api/casefile-users/assign-permissions": {
            "post": {
                "operationId": "updateBulkCasefileUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefilesUsersDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefilesUsersDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            }
        },
        "/api/casefile-users/userid": {
            "get": {
                "operationId": "getAllCasefilesByUserId",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            }
        },
        "/api/casefile-users/{id}": {
            "delete": {
                "operationId": "deleteCasefileUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            },
            "get": {
                "operationId": "getCasefileUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileUserDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-user-resource"
                ]
            }
        },
        "/api/casefiles": {
            "get": {
                "operationId": "getAllCasefiles",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CasefileWithEntriesDto"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            },
            "post": {
                "operationId": "createCasefile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileWithEntriesDto"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            },
            "put": {
                "operationId": "updateCasefile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CasefileDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileWithEntriesDto"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/casefile-by-user": {
            "get": {
                "operationId": "getAllCasefilesByUserIdAndCasefileUser",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CasefileWithUserAccessLevelDto"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/export/{exportId}/download": {
            "get": {
                "operationId": "downloadCasefileExport",
                "parameters": [
                    {
                        "in": "path",
                        "name": "exportId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/ingester/bulk/add/datasources": {
            "post": {
                "description": "Forwards a search request, formatted using Data Xray JSON query format, over indexed files\nstored in the Data Xray's Elasticsearch database, to document-ingester in order to add\nresults to the given casefile.\n",
                "operationId": "bulkAddDatasources",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkCasefileDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful add"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Invalid list of datasource ids"
                    }
                },
                "summary": "Adds datasources to casefile in elasticsearch",
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/ingester/bulk/remove/datasources": {
            "post": {
                "description": "Forwards a search request, formatted using Data Xray JSON query format, over indexed files\nstored in the Data Xray's Elasticsearch database, to document-ingester in order to remove\nresults from the given casefile.\n",
                "operationId": "bulkRemoveDatasources",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkCasefileDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful removal"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Invalid list of datasource ids"
                    }
                },
                "summary": "Removes datasources from casefile in elasticsearch",
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/ingester/{casefileId}/export/list": {
            "get": {
                "operationId": "getCasefileExportList",
                "parameters": [
                    {
                        "in": "path",
                        "name": "casefileId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/ingester/{casefileId}/export/start": {
            "post": {
                "operationId": "startCasefileExport",
                "parameters": [
                    {
                        "in": "path",
                        "name": "casefileId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_10",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/casefiles/{id}": {
            "get": {
                "operationId": "getCasefile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CasefileWithEntriesDto"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "casefile-resource"
                ]
            }
        },
        "/api/categorize-document": {
            "post": {
                "description": "Categorize document synchronously using AI features in Data X-Ray.\n",
                "operationId": "categorize",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataObjectDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategorizationResult"
                                }
                            }
                        },
                        "description": "Document categorized"
                    },
                    "400": {
                        "description": "Bad request, categorization rejected"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategorizationResult"
                                }
                            }
                        },
                        "description": "No categories configured"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Categorize single document",
                "tags": [
                    "categorize-document-resource"
                ]
            }
        },
        "/api/categorize-documents-jobs": {
            "get": {
                "operationId": "getAllJobs",
                "parameters": [
                    {
                        "in": "query",
                        "name": "endedAtAfter",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {},
                        "description": "Accepted"
                    }
                },
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            },
            "post": {
                "description": "Submit a job to asynchronously categorize one or more documents using AI features\nin Data X-Ray.\n",
                "operationId": "submitJob",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategorizeDocumentsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubmitCategorizeDocumentsJobResponse"
                                }
                            }
                        },
                        "description": "Job accepted"
                    },
                    "400": {
                        "description": "Bad request, job rejected"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubmitCategorizeDocumentsJobResponse"
                                }
                            }
                        },
                        "description": "No categories configured"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Submit a Categorize Documents Job",
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            }
        },
        "/api/categorize-documents-jobs/estimate-cost": {
            "post": {
                "description": "Estimate the cost of your categorizer request based the size of the prompt\nand the token price.\n",
                "operationId": "estimateCost",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategorizeDocumentsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategorizeDocumentsEstimatedCost"
                                }
                            }
                        },
                        "description": "Cost calculated"
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategorizeDocumentsEstimatedCost"
                                }
                            }
                        },
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad request, calculation failed"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategorizeDocumentsEstimatedCost"
                                }
                            }
                        },
                        "description": "No categories configured"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Estimate Categorize Documents Job cost",
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            }
        },
        "/api/categorize-documents-jobs/stats": {
            "get": {
                "operationId": "getJobStats",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategorizeDocumentsJobStats"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            }
        },
        "/api/categorize-documents-jobs/{jobId}": {
            "get": {
                "operationId": "getJob",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "OK"
                    }
                },
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            }
        },
        "/api/categorize-documents-jobs/{jobId}/cancel": {
            "post": {
                "operationId": "cancelJob",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            }
        },
        "/api/categorize-documents-jobs/{jobId}/errors": {
            "get": {
                "operationId": "getJobErrors",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "in": "query",
                        "name": "errorType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TEXT_CATEGORIZATION",
                                "TEXT_EXTRACTION",
                                "DISPATCH_FAILED",
                                "DOCUMENT_SEARCH_FAILED",
                                "DOCUMENT_LIMIT_EXCEEDED"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategorizeDocumentErrorMessage"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "categorize-documents-jobs-resource"
                ]
            }
        },
        "/api/client-ds-params": {
            "get": {
                "description": "Collects all the Client Organizational Unit Datasource Params for the organizational unit\nthat have been set in the DB.",
                "operationId": "getAllDatasourceParamsByOrgUnit",
                "parameters": [
                    {
                        "description": "Optional flag to expand the GCloud settings",
                        "in": "query",
                        "name": "filterSubParamsFlag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 2000
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTOUpdate"
                                    }
                                }
                            }
                        },
                        "description": "Successfully fetched client org unit datasource parameters"
                    }
                },
                "summary": "gets all the ClientOrgUnitDatasourceParams by organizational unit",
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            },
            "patch": {
                "operationId": "patchClientOrgUnitDsParams",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTOUpdate"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTOUpdate"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            },
            "post": {
                "operationId": "createClientOrgUnitDatasourceParam",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            },
            "put": {
                "operationId": "updateClientOrgUnitDatasourceParam",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTOUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            }
        },
        "/api/client-ds-params/connector-type/{connectorTypeId}": {
            "get": {
                "operationId": "getAllDatasourceParamsByConnectorTypeId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "connectorTypeId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "description": "Optional flag to expand the GCloud settings",
                        "in": "query",
                        "name": "filterSubParamsFlag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTOUpdate"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            }
        },
        "/api/client-ds-params/{id}": {
            "delete": {
                "operationId": "deleteDatasourceParameter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            },
            "get": {
                "operationId": "getDatasourceParameter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientOrgUnitDatasourceParamDTOUpdate"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "client-org-unit-datasource-param-resource"
                ]
            }
        },
        "/api/csv-export": {
            "get": {
                "operationId": "exportStatus",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "csv-export-resource"
                ]
            }
        },
        "/api/csv-export/export": {
            "post": {
                "description": "Creates a csv export request by filling in all the necessary information\nand forwards the request to CSV exporter. Returns success if the request\nhas been initiated successfully\n",
                "operationId": "sendExportRequest_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CsvExportRequestDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Successful initiation of the request"
                    },
                    "403": {
                        "description": "Authorization error"
                    }
                },
                "summary": "Trigger csv export service. Requires ds access level L3",
                "tags": [
                    "csv-export-resource"
                ]
            }
        },
        "/api/csv-export/{exportId}/download": {
            "get": {
                "operationId": "loadExportedFile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "exportId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "csv-export-resource"
                ]
            }
        },
        "/api/dashboard/annotator-statistics": {
            "get": {
                "description": "Fetch document count by annotator statistics for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getAnnotatorStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AnnotatorStatisticsDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successfully retrieved top annotators by files."
                    }
                },
                "summary": "Document count by annotator statistics for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/annotators-domain-document-statistics": {
            "get": {
                "description": "Fetch annotators domain document statistics for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getAnnotatorsDomainDocumentStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AnnotatorsDomainDocumentCountDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successfully retrieved top annotator domains by files."
                    }
                },
                "summary": "Annotators domain document statistics for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/category-statistics": {
            "get": {
                "description": "Fetch document count labelled by category statistics for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getCategoryStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryStatisticsDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successfully retrieved top category by files."
                    }
                },
                "summary": "Document count labelled by category statistics for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/datasources-with-findings": {
            "get": {
                "description": "Count datasources with findings,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "countDataSourcesWithFindings",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        },
                        "description": "Successfully retrieved number of datasources with findings."
                    }
                },
                "summary": "Count datasources with findings\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/file-age-statistics": {
            "get": {
                "description": "Fetch file age statistics for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getFileAgeStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fileAgeType",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CREATED",
                                "LAST_MODIFIED"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/HistogramDTOString"
                                }
                            }
                        },
                        "description": "Successfully retrieved file size statistics."
                    }
                },
                "summary": "Retrieve file age statistics for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/file-size-statistics": {
            "get": {
                "description": "Fetch file size statistics for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getFileSizeStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileSizeStatisticsDTO"
                                }
                            }
                        },
                        "description": "Successfully retrieved file size statistics."
                    }
                },
                "summary": "Retrieve file size statistics for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/file-status-statistics": {
            "get": {
                "description": "Fetch document status counts for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getFileStatusStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentStatusCountsDTO"
                                }
                            }
                        },
                        "description": "Successfully retrieved file status statistics."
                    }
                },
                "summary": "Retrieve document status counts for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/label-statistics": {
            "get": {
                "description": "Fetch document count tagged by label statistics for selected datasources,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getLabelStatistics",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelStatisticsDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successfully retrieved top labels by files."
                    }
                },
                "summary": "Document count tagged by label statistics for datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/dashboard/largest-datasources": {
            "get": {
                "description": "Fetch the top datasources based on search criteria,\nconsidering only the datasources that the logged-in user has access to.",
                "operationId": "getLargestDatasources",
                "parameters": [
                    {
                        "in": "query",
                        "name": "criteria",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINDINGS",
                                "TOTAL_FILES"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LargestDatasourceStatisticsDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successfully retrieved the top datasources."
                    }
                },
                "summary": "Retrieve Largest datasources\nAccessible by the Logged-in User",
                "tags": [
                    "dashboard-resource"
                ]
            }
        },
        "/api/data-categories": {
            "get": {
                "operationId": "getAllDataCategories",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataCategoryListResponseDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            },
            "post": {
                "operationId": "createDataCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataCategoryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataCategoryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            },
            "put": {
                "operationId": "updateDataCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataCategoryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataCategoryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            }
        },
        "/api/data-categories/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_9",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            }
        },
        "/api/data-categories/with-data-class-count": {
            "get": {
                "operationId": "getAllCategoriesWithDataClassCountAndPermissions",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            }
        },
        "/api/data-categories/{id}": {
            "delete": {
                "operationId": "deleteDataCategory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            },
            "get": {
                "operationId": "getDataCategory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-category-resource"
                ]
            }
        },
        "/api/data-classes": {
            "get": {
                "operationId": "getAllDataClasses",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "uniqueItems": true,
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-class-resource"
                ]
            }
        },
        "/api/data-classes/add-to-category": {
            "put": {
                "operationId": "addDataClassesToCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataClassesCategoryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataClassesCategoryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-class-resource"
                ]
            }
        },
        "/api/data-classes/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_8",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-class-resource"
                ]
            }
        },
        "/api/data-classes/{id}": {
            "delete": {
                "operationId": "deleteDataClass",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-class-resource"
                ]
            },
            "get": {
                "operationId": "getDataClass",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/DataClassDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DictionaryDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NamedEntityDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RegexDTO"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "data-class-resource"
                ]
            }
        },
        "/api/datasource-connector-types": {
            "get": {
                "operationId": "getAllDatasourceConnectorTypes",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceConnectorTypeDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-connector-type-resource"
                ]
            },
            "put": {
                "operationId": "updateDatasourceConnectorType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceConnectorTypeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceConnectorTypeDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-connector-type-resource"
                ]
            }
        },
        "/api/datasource-connector-types/datasource-connector-types-attributes": {
            "post": {
                "operationId": "createDatasourceConnectorTypeWithAttributes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceConnectorTypeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceConnectorTypeDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-connector-type-resource"
                ]
            }
        },
        "/api/datasource-connector-types/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_7",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-connector-type-resource"
                ]
            }
        },
        "/api/datasource-connector-types/{id}": {
            "delete": {
                "operationId": "deleteDatasourceConnectorType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-connector-type-resource"
                ]
            },
            "get": {
                "description": "Gets the data connector type for given id.",
                "operationId": "getDatasourceConnectorType",
                "parameters": [
                    {
                        "description": "connector type id that should be fetched",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "description": "defines which attributes should be fetched for connector authentication",
                        "in": "query",
                        "name": "option",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Data connector type is retrieved"
                    },
                    "400": {
                        "description": "id cannot be null"
                    },
                    "404": {
                        "description": "Data connector type was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Gets the datasource connector type",
                "tags": [
                    "datasource-connector-type-resource"
                ]
            }
        },
        "/api/datasource-user-permissions": {
            "get": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use GET /profile-user-permissions.",
                "operationId": "getAllDatasourceUserPermissions",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasourceId",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceUserPermissionDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-user-permission-resource"
                ]
            },
            "post": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use POST /profile-user-permissions.",
                "operationId": "createDatasourceUserPermission",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceUserPermissionDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceUserPermissionDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-user-permission-resource"
                ]
            },
            "put": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use PUT /profile-user-permissions.",
                "operationId": "updateDatasourceUserPermission",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceUserPermissionDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceUserPermissionDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-user-permission-resource"
                ]
            }
        },
        "/api/datasource-user-permissions/{id}": {
            "delete": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use DELETE /profile-user-permissions/{id}.",
                "operationId": "deleteDatasourceUserPermission",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-user-permission-resource"
                ]
            },
            "get": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use GET /profile-user-permissions/{id}.",
                "operationId": "getDatasourceUserPermission",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceUserPermissionDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-user-permission-resource"
                ]
            }
        },
        "/api/datasources": {
            "get": {
                "operationId": "getAllDatasourcesByPermissions",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 2147483647
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            },
            "put": {
                "operationId": "updateDatasource",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/add-data-classes": {
            "post": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use\nPOST  /settings-profiles/{profileId}/add-data-classes.",
                "operationId": "addDataClasses_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceDataClassDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceDataClassDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/browse": {
            "get": {
                "operationId": "getBrowseDatasourcesByPermissions",
                "parameters": [
                    {
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 2147483647
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceBrowseDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/collibra/{datasourceId}/sync/status": {
            "get": {
                "description": "Fetches the status of a request to sync the datasource with Collibra\nvia the Collibra syncer module.\nIf the user does not have L4 access on the datasource the call will fail\nwith a Forbidden error",
                "operationId": "getCollibraSyncStatus",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DxrSyncJobDTO"
                                }
                            }
                        },
                        "description": "Status of sync request submitted to Collibra syncer"
                    },
                    "400": {
                        "description": "Datasource is either not indexed or is being currently scanned"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Fetches status of datasource sync with Collibra.\nThe user must have L4 access on the datasource to perform the action",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/collibra/{id}/sync": {
            "put": {
                "description": "Sends a request to sync the datasource with Collibra via the Collibra syncer module.\nIf the user does not have L4 access on the datasource the call will fail\nwith a Forbidden error",
                "operationId": "syncToCollibra",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sync request submitted to Collibra syncer"
                    },
                    "400": {
                        "description": "Datasource is either not indexed or is being currently scanned"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Sends a request to sync the datasource with Collibra.\nThe user must have L4 access on the datasource to perform the action",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/current-org-id": {
            "get": {
                "operationId": "getAllDatasources",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/demos": {
            "get": {
                "operationId": "getAllDemoDatasources",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/export/{exportId}/download": {
            "get": {
                "operationId": "downloadDatasourceExport",
                "parameters": [
                    {
                        "in": "path",
                        "name": "exportId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/elasticsearch/allmetadata": {
            "get": {
                "description": "Retrieves the metadata fields of all the datasources",
                "operationId": "getAllDatasourcesMetadataFields",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "uniqueItems": true,
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Map of results"
                    },
                    "400": {
                        "description": "Nothing found, returns empty result"
                    },
                    "403": {
                        "description": "Authentication error"
                    },
                    "404": {
                        "description": "Bad request, returns empty result"
                    }
                },
                "summary": "List of all metadata fields",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/index/classes": {
            "get": {
                "operationId": "getDatasourceElasticsearchClasses",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "uniqueItems": true,
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AnnotatorDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/index/mapping": {
            "get": {
                "operationId": "getDatasourceElasticsearchMapping",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/tags/multiple/add": {
            "post": {
                "operationId": "addMultipleTagsInIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MultipleTagsDetail"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/tags/multiple/remove": {
            "post": {
                "operationId": "removeMultipleTagsInIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MultipleTagsDetail"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/elasticsearch": {
            "delete": {
                "description": "Removes the datasource from the index. If the user does not have L4 access on the\ndatasource or is not a system administrator the call will fail with a Forbidden error",
                "operationId": "removeDatasourceFromElasticsearch",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Datasource was removed from the index"
                    },
                    "404": {
                        "description": "The datasource was not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Removes the datasource from the index. The user must have L4 access on the datasource\nor is a system administrator to perform the action",
                "tags": [
                    "datasource-resource"
                ]
            },
            "post": {
                "description": "Adds the given datasource to index based on the status of the datasource.",
                "operationId": "addDatasourceToElasticsearch",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Datasource already exists."
                    },
                    "201": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Datasource was added to the index"
                    },
                    "404": {
                        "description": "Datasource was not found"
                    },
                    "409": {
                        "description": "Datasource addition to index not allowed during cleanup."
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "502": {
                        "description": "Unable to connect to the datasource"
                    }
                },
                "summary": "Adds the given datasource to index.",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/export/list": {
            "get": {
                "operationId": "getDatasourceExportList",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/export/start": {
            "post": {
                "operationId": "startDatasourceExport",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/file/download": {
            "get": {
                "description": "Fetches the contents of a file for a given Datasource as a stream.\nIf the file or the datasource do not exist, it will throw an error",
                "operationId": "extractFileContentAsStream",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "File contents fetched"
                    },
                    "400": {
                        "description": "Object id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Datasource Id is null or datasource was not found or file was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the contents of a file as a stream",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/file/extract": {
            "get": {
                "operationId": "extractFileContentAsText_1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "compositeType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "parentCompositeType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/tags/add": {
            "post": {
                "operationId": "addTagsToObjectId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagDetails"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{datasourceId}/tags/remove": {
            "post": {
                "operationId": "removeTagsFromObjectId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagDetails"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/ingester/{idList}/index/status": {
            "get": {
                "operationId": "getDatasourceElasticsearchStatus",
                "parameters": [
                    {
                        "in": "path",
                        "name": "idList",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/remove-data-classes": {
            "post": {
                "deprecated": true,
                "description": "This endpoint is deprecated, instead use\nDELETE  /settings-profiles/{profileId}/add-data-classes.",
                "operationId": "removeDataClasses_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceDataClassDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceDataClassDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/search-by-name": {
            "post": {
                "operationId": "searchDatasourceWithNameLike",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceSearchDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceSearchDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/searchable": {
            "get": {
                "operationId": "getSearchableDatasourcesByPermissions",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SearchableDatasourceDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/settings/index": {
            "post": {
                "deprecated": true,
                "description": "Updates the indexConfig for a given Datasource.\nIf the datasource does not have a SettingsProfile, it will throw error.\nThis endpoint is deprecated, instead use POST /settings-profiles/settings/index.",
                "operationId": "updateDatasourceIndexSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndexConfigDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexConfigDTO"
                                }
                            }
                        },
                        "description": "IndexConfig updated"
                    },
                    "400": {
                        "description": "Datasource id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Updates the index settings for a given datasource",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/settings/index/fields": {
            "get": {
                "operationId": "getIndexSettingsFields",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexConfigFieldsDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/settings/index/fields/values": {
            "get": {
                "operationId": "getIndexSettingsFieldsValues",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CurrentIndexFieldsSettingVM"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/with-attributes": {
            "patch": {
                "description": "Updates the attributes of an existing datasource. If any of the provided attributes\ndoes not exist in the datasource, it will be added as new",
                "operationId": "patchDatasourceWithAttributes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceWithAttributesDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceDTO"
                                }
                            }
                        },
                        "description": "Datasource attributes updated"
                    },
                    "400": {
                        "description": "Datasource id cannot be null"
                    },
                    "404": {
                        "description": "Datasource was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Updates the attributes of an existing datasource",
                "tags": [
                    "datasource-resource"
                ]
            },
            "post": {
                "operationId": "createDatasourceWithAttributes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourceWithAttributesDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceWithAttributesDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/with-attributes/multiple": {
            "post": {
                "operationId": "createDatasourceWithAttributes_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DatasourceWithAttributesDTO"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{connectorTypeId}/{datasourceId}": {
            "post": {
                "operationId": "createDatasourceFromConnectorType",
                "parameters": [
                    {
                        "in": "path",
                        "name": "connectorTypeId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/access-token": {
            "get": {
                "operationId": "accessToken",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/data-object": {
            "get": {
                "operationId": "getDataObject",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/dlp/sync": {
            "post": {
                "description": "Sends a request to sync the datasource with dlp-syncer module.\nIf the user does not have L4 access on the datasource the call will fail\nwith a Forbidden error",
                "operationId": "syncToDlp",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DxrSyncJobDTO"
                                }
                            }
                        },
                        "description": "Sync request submitted to dlp-syncer"
                    },
                    "400": {
                        "description": "Datasource is either not indexed or is being currently scanned"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Sends a request to sync the datasource with dlp-syncer.\nThe user must have L4 access on the datasource to perform the action",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/dlp/sync/status": {
            "get": {
                "description": "Fetches the status of a request to sync the datasource with dlp-syncer module.\nIf the user does not have L4 access on the datasource the call will fail\nwith a Forbidden error",
                "operationId": "getDlpSyncStatus",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DxrSyncJobDTO"
                                }
                            }
                        },
                        "description": "Status of sync request submitted to dlp-syncer"
                    },
                    "400": {
                        "description": "Datasource is either not indexed or is being currently scanned"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Fetches status of datasource sync with dlp-syncer.\nThe user must have L4 access on the datasource to perform the action",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/export/download": {
            "get": {
                "operationId": "getDatasourceContent",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/monitor": {
            "post": {
                "deprecated": true,
                "description": "Datasource monitor flag is set the specified value.\nThis endpoint is deprecated, instead use POST /settings-profiles/{profileId}/monitor",
                "operationId": "toggleMonitorFlagForDatasource",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "flag",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "403": {
                        "description": "Authentication error"
                    }
                },
                "summary": "Toggles monitoring a datasource.",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/recrawl": {
            "post": {
                "description": "Recrawls once the provided datasource.",
                "operationId": "recrawlDatasource",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "No content"
                    },
                    "403": {
                        "description": "Authentication error"
                    }
                },
                "summary": "Recrawls a datasource.",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/settings/index": {
            "get": {
                "deprecated": true,
                "description": "Fetches the indexConfig for a given Datasource.\nIf the provided id does not exist, it will throw an error.\nThis endpoint is deprecated, instead use GET  /settings-profiles/{profileId}/settings/index",
                "operationId": "getDatasourceIndexSettings",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexConfigDTO"
                                }
                            }
                        },
                        "description": "IndexConfig fetched"
                    },
                    "400": {
                        "description": "Datasource id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "IndexConfig was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the index settings for a given datasource id",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{datasourceId}/used-storage": {
            "get": {
                "operationId": "fetchUsedStorage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{id}": {
            "delete": {
                "description": "Clears all datasource references from everywhere and soft deletes the datasource. If the\nuser does not have L4 access on the datasource or is not a system administrator the call\nwill fail with a Forbidden error",
                "operationId": "deleteDatasource",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Datasource references were cleared and the datasource was soft deleted"
                    },
                    "404": {
                        "description": "The datasource was not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Clears all datasource references from DXR and soft deletes the datasource. The user must\nhave L4 access on the datasource or is a system administrator to perform the action",
                "tags": [
                    "datasource-resource"
                ]
            },
            "get": {
                "description": "Fetches the Datasource for a given id.\nIf any of the provided id does not exist in the Datasource,\nit will throw error",
                "operationId": "getDatasourceV3",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "header",
                        "name": "api-version",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "V3",
                                "V2"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/DatasourceWithConnectorTypeAttributesDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DatasourceVerboseDTO"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Datasource fetched"
                    },
                    "400": {
                        "description": "Datasource id cannot be null"
                    },
                    "404": {
                        "description": "Datasource was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the existing datasource",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{id}/connector-types-attributes": {
            "get": {
                "description": "Fetches the connector type attributes of an existing datasource.\n If any of the provided attributes does not exist in the datasource,\n it will throw error",
                "operationId": "getConnectorTypeAttributes",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourceWithConnectorTypeAttributesDTO"
                                }
                            }
                        },
                        "description": "Connector type attributes fetched"
                    },
                    "400": {
                        "description": "Datasource id cannot be null"
                    },
                    "404": {
                        "description": "Datasource was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the connector type attributes of an existing datasource",
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/datasources/{id}/folder": {
            "get": {
                "operationId": "getDatasourceFolder_1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "folderId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "datasource-resource"
                ]
            }
        },
        "/api/diagnostics/download": {
            "post": {
                "description": "Forwards the request to diagnostics exporter service. Returns success if the request\nhas been served successfully.\n",
                "operationId": "download",
                "parameters": [
                    {
                        "in": "query",
                        "name": "params",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/gzip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "Successful served the request"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Download diagnostics export. Requires admin or diagnostic manager access.",
                "tags": [
                    "diagnostics-resource"
                ]
            }
        },
        "/api/diagnostics/export": {
            "post": {
                "description": "Forwards the request to diagnostics exporter service. Returns success if the request\nhas been initiated successfully.\nIt takes an optional logs period to be exported, in ISO 8601 Duration format.\n   By default the logs for the last 24 hours are exported.\n   Value is expected to be in ISO 8601 Duration format - P[n]Y[n]M[n]DT[n]H[n]M[n]S.\n   Eg. for PT12H, logs for the last 12 hours from UTC time, are exported.\nIt also takes an optional flag to indicate if prometheus data should be exported.\nIn case of any system failure, it will throw error.\n",
                "operationId": "sendExportRequest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportEnvironmentDiagnosticsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Successful initiation of the request"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Trigger diagnostics export service. Requires admin or diagnostic manager access.",
                "tags": [
                    "diagnostics-resource"
                ]
            }
        },
        "/api/diagnostics/export/status": {
            "get": {
                "description": "Fetches status of export for DXR diagnostics.\nIn case of any system failure, it will throw error",
                "operationId": "getExportStatus",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "Completed status": {
                                        "description": "Completed status",
                                        "summary": "Diagnostics status when export is ready for download",
                                        "value": {
                                            "status": "COMPLETED",
                                            "size": 604976344,
                                            "createdAt": "2024-07-10T04:54:45+0000"
                                        }
                                    },
                                    "Error status": {
                                        "description": "Error status",
                                        "summary": "Diagnostics status when there has been an error during the export generation",
                                        "value": {
                                            "status": "ERROR",
                                            "message": "Cannot access log files"
                                        }
                                    },
                                    "In progress status": {
                                        "description": "In progress status",
                                        "summary": "Diagnostics status when export generation is in progress",
                                        "value": {
                                            "status": "IN_PROGRESS"
                                        }
                                    },
                                    "No data status": {
                                        "description": "No data status",
                                        "summary": "Diagnostics status when no export is generated or being generated",
                                        "value": {
                                            "status": "NO_DATA"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful served the request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Get status of DXR diagnostics export",
                "tags": [
                    "diagnostics-resource"
                ]
            }
        },
        "/api/dictionaries": {
            "get": {
                "operationId": "getAllDictionaries",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DictionaryDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            },
            "post": {
                "operationId": "createDictionary",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DictionaryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            },
            "put": {
                "operationId": "updateDictionary",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DictionaryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/dictionaries/entries": {
            "put": {
                "operationId": "updateDictionaryEntries",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DictionaryEntriesDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/dictionaries/export": {
            "post": {
                "operationId": "exportDictionary",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataClassExportDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/dictionaries/import": {
            "post": {
                "operationId": "importDictionary",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DataClassImportDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/dictionaries/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_6",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/dictionaries/{id}": {
            "get": {
                "operationId": "getDictionary",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/DataClassDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DictionaryDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NamedEntityDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RegexDTO"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/dictionaries/{id}/clone": {
            "post": {
                "operationId": "cloneDictionary",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                }
                            }
                        },
                        "description": "Created"
                    }
                },
                "tags": [
                    "dictionary-resource"
                ]
            }
        },
        "/api/document-categories": {
            "get": {
                "operationId": "getAllDocumentCategories",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentCategoryDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "document-category-resource"
                ]
            },
            "post": {
                "operationId": "createDocumentCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentCategoryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentCategoryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "document-category-resource"
                ]
            },
            "put": {
                "operationId": "updateDocumentCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentCategoryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentCategoryDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "document-category-resource"
                ]
            }
        },
        "/api/document-categories/replace-all": {
            "post": {
                "operationId": "replaceAll",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DocumentCategoryDTO"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "tags": [
                    "document-category-resource"
                ]
            }
        },
        "/api/document-categories/{id}": {
            "delete": {
                "operationId": "deleteDocumentCategory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "document-category-resource"
                ]
            }
        },
        "/api/document-categorizer-org-unit-settings": {
            "get": {
                "operationId": "getDocumentCategorizerOrgUnitSettings",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentCategorizerOrgUnitSettingsDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "document-categorizer-org-unit-settings-resource"
                ]
            },
            "put": {
                "operationId": "updateDocumentCategorizerOrgUnitSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentCategorizerOrgUnitSettingsDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentCategorizerOrgUnitSettingsDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "document-categorizer-org-unit-settings-resource"
                ]
            }
        },
        "/api/esquery/dxr/transform": {
            "post": {
                "operationId": "generateEsQueryFromDxrQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "DXR to ES Query Request": {
                                    "description": "DXR to ES Query Request",
                                    "summary": "DXR to ES Query Request",
                                    "value": {
                                        "query": {
                                            "query_items": [
                                                {
                                                    "parameter": "ds#file_name",
                                                    "value": "the",
                                                    "operator": "AND",
                                                    "type": "text",
                                                    "match_strategy": "keyword",
                                                    "group_id": 0,
                                                    "group_order": 0
                                                },
                                                {
                                                    "parameter": "dxr#raw_text",
                                                    "value": "the",
                                                    "operator": "OR",
                                                    "type": "text",
                                                    "match_strategy": "keyword",
                                                    "group_id": 0,
                                                    "group_order": 1
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/ElasticsearchQueryGeneratorRequestDto"
                            }
                        }
                    },
                    "description": "DXR to Elasticsearch Query generation request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "elasticsearch-query-generator-resource"
                ]
            }
        },
        "/api/groups": {
            "get": {
                "description": "This endpoint allows you to retrieve a list of role-based groups.\nRole-based groups are used to organize users based on\ntheir functions and associated permissions.\nThis GET request provides a way to access information about existing role-based groups,\nhelping with user management, and understanding the current group configurations.",
                "operationId": "getAllGroups_1",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successful response with a list of role-based groups"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    },
                    "404": {
                        "description": "Groups not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Request to Retrieve Role-Based Groups",
                "tags": [
                    "group-resource"
                ]
            },
            "post": {
                "description": "This endpoint allows you to create a new role-based group.\nRole-based groups are used to group users by their functions\nand assign specific permissions,\nenabling efficient access control and security.\nUse this POST request to define a new role-based group and its associated attributes.",
                "operationId": "createGroup_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupDTO"
                                }
                            }
                        },
                        "description": "Role-based group successfully created"
                    },
                    "400": {
                        "description": "Bad request, invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Request for Creating a New Role-Based Group",
                "tags": [
                    "group-resource"
                ]
            },
            "put": {
                "operationId": "updateGroup_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupUpdateDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "group-resource"
                ]
            }
        },
        "/api/groups/deactivate/{id}": {
            "put": {
                "operationId": "deActivateGroup_1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "group-resource"
                ]
            }
        },
        "/api/groups/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_5",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "group-resource"
                ]
            }
        },
        "/api/groups/{id}": {
            "delete": {
                "operationId": "deleteGroup_1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "group-resource"
                ]
            },
            "get": {
                "operationId": "getGroup_1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "group-resource"
                ]
            }
        },
        "/api/indexed-files/aggregate": {
            "post": {
                "description": "Performs a aggregation over indexed files stored in the Data Xray's Elasticsearch\ndatabase. Aggregations can be formed in two different modes: native Elasticsearch\nqueries or using a Data Xray JSON query format which acts as an abstraction\nlayer over the Elasticsearch aggregation query form.\n\nUsers can specify the Datasources they wish to search over to allow for more\ntargeted searches. If no Datasources are given in the search request, then\nall Datasources available to the user will be searched over.\n\nMoreover, users can specify the result size to determine whether the documents\nmatching the request will be returned.\n\nFinally, users can specify a top level query to narrow down the documents on which\nto execute the aggregation. If the query_items object is empty then the aggregation\nwill be executed against all documents of the provided datasources.\n",
                "operationId": "aggregateIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "Aggregate using Data Xray JSON query format": {
                                    "description": "Aggregate using Data Xray JSON query format",
                                    "summary": "Aggregate using Data Xray JSON query format",
                                    "value": {
                                        "mode": "DXR_JSON_QUERY",
                                        "datasourceIds": [
                                            100
                                        ],
                                        "aggregation": {
                                            "aggs_items": [
                                                {
                                                    "aggregation_type": "filter",
                                                    "name": "test",
                                                    "parameter": "field",
                                                    "value": "annotation.18",
                                                    "parameter_type": "number",
                                                    "match_strategy": "exists"
                                                }
                                            ],
                                            "query_items": []
                                        }
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/DXRIndexAggregationRequest"
                            }
                        }
                    },
                    "description": "The Aggregate request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "Aggregation results with hits": {
                                        "description": "Aggregation results with hits",
                                        "summary": "Search results with hits",
                                        "value": {
                                            "took": 4,
                                            "timed_out": false,
                                            "_shards": {
                                                "total": 1,
                                                "successful": 1,
                                                "skipped": 0,
                                                "failed": 0
                                            },
                                            "hits": {
                                                "total": {
                                                    "value": 1,
                                                    "relation": "eq"
                                                },
                                                "max_score": null,
                                                "hits": []
                                            },
                                            "aggregations": {
                                                "Cardinal number": {
                                                    "doc_count": 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful aggregation"
                    },
                    "400": {
                        "description": "Invalid search request"
                    },
                    "403": {
                        "description": "Authorization error"
                    }
                },
                "summary": "Performs a aggregation over indexed files",
                "tags": [
                    "indexed-files-resource"
                ]
            }
        },
        "/api/indexed-files/export": {
            "get": {
                "description": "Export JSON-formatted stream of indexed data.\n\nThis endpoint supports the indexed time window filters, which returns only files\nthat belong to a datasource with an index_last_modified_date between the two\ndate parameters.\nYou can also filter by scan ended time window, which returns only files that were\nupdated during a scan that ended between two date parameters. Note that when\nfiltering by scan ended time window, the report-based datasources are excluded\nbecause they do not support scans.\n\nThis parameters are validated as RFC3339 dates.\n\n*Note that this endpoint only returns the indexed data for datasources that you have\nL3 permissions or greater.*\n",
                "operationId": "exportStream",
                "parameters": [
                    {
                        "description": "Determines the output format for the stream export.",
                        "in": "header",
                        "name": "Accept",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "application/jsonlines"
                            ]
                        }
                    },
                    {
                        "description": "Filter by index time window.\nIf it's not specified, it's treated as 2016-01-01T00:00:00.000Z.\n",
                        "example": "2023-12-01T00:00:00.000Z",
                        "in": "query",
                        "name": "startTime",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Filter by index time window.\nIf it's not specified, it's treated as 2016-01-01T00:00:00.000Z.\n",
                            "format": "date-time",
                            "example": "2023-12-01T00:00:00Z"
                        }
                    },
                    {
                        "description": "Filter by index time window.\nIf's not specified, then it's treated as \"now\".\nMust be a date after startTime.\n",
                        "example": "2023-12-01T00:00:00.000Z",
                        "in": "query",
                        "name": "endTime",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Filter by index time window.\nIf's not specified, then it's treated as \"now\".\nMust be a date after startTime.\n",
                            "format": "date-time",
                            "example": "2023-12-01T00:00:00Z"
                        }
                    },
                    {
                        "description": "Filter by scan ended time window.\nIf it's not specified, it's treated as 2016-01-01T00:00:00.000Z.\n",
                        "example": "2023-11-01T00:00:00.000Z",
                        "in": "query",
                        "name": "scansEndedAfter",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Filter by scan ended time window.\nIf it's not specified, it's treated as 2016-01-01T00:00:00.000Z.\n",
                            "format": "date-time",
                            "example": "2023-11-01T00:00:00Z"
                        }
                    },
                    {
                        "description": "Filter by scan ended time window.\nIf it's not specified, it's treated as \"now\".\nMust be a date after scansEndedAfter.\n",
                        "example": "2023-12-01T00:00:00.000Z",
                        "in": "query",
                        "name": "scansEndedBefore",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Filter by scan ended time window.\nIf it's not specified, it's treated as \"now\".\nMust be a date after scansEndedAfter.\n",
                            "format": "date-time",
                            "example": "2023-12-01T00:00:00Z"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/jsonlines": {
                                "example": {
                                    "data_object": {
                                        "indexed_date": "2023-12-13T00:44:11.820058Z",
                                        "object_id": "01HMRJHRADQFYVNXYUHJAJLJWV5CLHRCQ7",
                                        "object_name": "Space Station.docx",
                                        "object_path": "01HMRJHRADQFYVNXYUHJAJLJWV5CLHRCQ7",
                                        "object_size": 11291,
                                        "custom_metadata": {
                                            "CREATED_BY_USER_NAME": "Carlos Ruano",
                                            "SHAREPOINT_LIST_ID": "dc481331-f199-4bbd-933b-fc436b5cf522",
                                            "LAST_MODIFIED_BY_USER_ID": "84aa7875-3a4a-4a45-a766-8c2cb5f5fd0c",
                                            "CREATION_DATE": "2022-02-03T19:44:47Z",
                                            "CREATED_BY_USER_ID": "84aa7875-3a4a-4a45-a766-8c2cb5f5fd0c",
                                            "SHAREPOINT_LIST_ITEM_UNIQUE_ID": "56718103-14df-403a-95a6-d5e896788a1f",
                                            "MODIFIED_DATE": "2022-02-03T19:46:08Z",
                                            "LAST_MODIFIED_BY_USER_NAME": "Carlos Ruano"
                                        },
                                        "datasource_scan": {
                                            "id": 161704,
                                            "started_at": "2023-12-13T00:43:58.882491Z",
                                            "ended_at": "2023-12-13T00:45:01.678689Z"
                                        }
                                    },
                                    "datasource_info": {
                                        "datasource_id": 20961,
                                        "datasource_name": "Carlos Ruano (carlos@ohalo.onmicrosoft.com)",
                                        "datasource_type": "OneDrive (Graph API)",
                                        "connection_attributes": [
                                            {
                                                "key": [
                                                    "principal_username"
                                                ],
                                                "value": "carlos@ohalo.onmicrosoft.com"
                                            },
                                            {
                                                "key": [
                                                    "principal_id"
                                                ],
                                                "value": "84aa7875-3a4a-4a45-a766-8c2cb5f5fd0c"
                                            }
                                        ],
                                        "datasource_metadata": {
                                            "siteUrl": "https://ohalo-my.sharepoint.com/personal/carlos_ohalo_onmicrosoft_com",
                                            "siteId": "56b4d96c-c5ff-4562-9836-374105408014"
                                        }
                                    },
                                    "rules": [
                                        {
                                            "rule_id": 18,
                                            "rule_name": "Organization",
                                            "category_id": 4,
                                            "category_name": "Non-sensitive",
                                            "type": "Ohalo Entity",
                                            "matches_count": 2
                                        },
                                        {
                                            "rule_id": 16,
                                            "rule_name": "Location",
                                            "category_id": 4,
                                            "category_name": "Non-sensitive",
                                            "type": "Ohalo Entity",
                                            "matches_count": 2
                                        },
                                        {
                                            "rule_id": 17,
                                            "rule_name": "Geo-political Entity",
                                            "category_id": 4,
                                            "category_name": "Non-sensitive",
                                            "type": "Ohalo Entity",
                                            "matches_count": 3
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid time range provided"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "406": {
                        "description": "Mimetype is not supported"
                    }
                },
                "summary": "Export JSON-formatted stream of indexed data",
                "tags": [
                    "indexed-files-resource"
                ]
            }
        },
        "/api/indexed-files/search": {
            "post": {
                "description": "Performs a search over indexed files stored in the Data Xray's Elasticsearch\ndatabase. Searches can be formed using a Data Xray JSON query format which acts\nas an abstraction layer over the Elasticsearch query form.\n\nUsers can specify the Datasources they wish to search over to allow for more\ntargeted searches. If no Datasources are given in the search request, then\nall Datasources available to the user will be searched over.\n",
                "operationId": "searchIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "Search using Data Xray JSON query format": {
                                    "description": "Search using Data Xray JSON query format",
                                    "summary": "Search using Data Xray JSON query format",
                                    "value": {
                                        "mode": "DXR_JSON_QUERY",
                                        "datasourceIds": [
                                            100
                                        ],
                                        "pageNumber": 0,
                                        "pageSize": 20,
                                        "filter": {
                                            "query_items": []
                                        },
                                        "sort": [
                                            {
                                                "property": "_score",
                                                "order": "DESCENDING"
                                            }
                                        ]
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/DXRIndexedFilesSearchRequest"
                            }
                        }
                    },
                    "description": "The search request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "Search results with hits": {
                                        "description": "Search results with hits",
                                        "summary": "Search results with hits",
                                        "value": {
                                            "took": 4,
                                            "timed_out": false,
                                            "_shards": {
                                                "total": 1,
                                                "successful": 1,
                                                "skipped": 0,
                                                "failed": 0
                                            },
                                            "hits": {
                                                "total": {
                                                    "value": 1,
                                                    "relation": "eq"
                                                },
                                                "max_score": 1,
                                                "hits": [
                                                    {
                                                        "_index": "6754",
                                                        "_type": "_doc",
                                                        "_id": "Documents%2FInvoices%2FInvoice+1.3+%23+3.pdf",
                                                        "_score": 1,
                                                        "_ignored": [
                                                            "annotation.10"
                                                        ],
                                                        "_source": {
                                                            "ds#file_name": "Invoice 1.3 # 3.pdf",
                                                            "datasource_id": 6754,
                                                            "object_id": "Documents/Invoices/Invoice 1.3 # 3.pdf",
                                                            "ds#parent_folder_paths": [
                                                                "Documents/Invoices"
                                                            ],
                                                            "dxr#mime_type": "application/pdf",
                                                            "dxr#indexed_date": "2022-12-20T15:04:33.887468445Z",
                                                            "dxr#sha_256_hash": "081d59ed24edcae4f57795c072fe38bf718fc5c8624e4641fa3634afc5cf24e7",
                                                            "ds#file_size": 13933,
                                                            "dxr#doc_lang": "en",
                                                            "dxr#composite_type": "SIMPLE",
                                                            "dxr#is_processed": true,
                                                            "dxr#document_status": "TAGGED",
                                                            "dxr#text_extraction_status": "SUCCESS",
                                                            "dxr#tags": [],
                                                            "dxr#manually_removed_tags": [],
                                                            "dxr#ocr_used": false,
                                                            "metadata#OWNER_READ": true,
                                                            "metadata#IS_HIDDEN": false,
                                                            "metadata#GROUP_WRITE": false,
                                                            "metadata#GROUP_READ": true,
                                                            "metadata#OTHERS_WRITE": false,
                                                            "metadata#OWNER_WRITE": true,
                                                            "metadata#OTHERS_READ": true,
                                                            "metadata#OTHERS_EXECUTE": false,
                                                            "metadata#MODIFIED_DATE": "2021-08-25T19:29:28Z",
                                                            "metadata#OWNER_EXECUTE": false,
                                                            "metadata#OWNER_GROUP": "root",
                                                            "metadata#OWNER_USER": "root",
                                                            "metadata#GROUP_EXECUTE": false,
                                                            "annotation.10": [
                                                                "Oct 3, 2019",
                                                                "Oct 4, 2019"
                                                            ],
                                                            "annotation.4": [
                                                                "# 3"
                                                            ],
                                                            "annotation.8": [
                                                                "20%"
                                                            ],
                                                            "annotation.7": [
                                                                "336,000.00"
                                                            ],
                                                            "annotation.18": [
                                                                "INVOICE"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful search"
                    },
                    "400": {
                        "description": "Invalid search request"
                    },
                    "403": {
                        "description": "Authorization error"
                    }
                },
                "summary": "Performs a search over indexed files",
                "tags": [
                    "indexed-files-resource"
                ]
            }
        },
        "/api/invalidate-tokens": {
            "put": {
                "operationId": "invalidateTokens",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvalidateUserTokensDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidateUserTokensDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/keys": {
            "put": {
                "operationId": "generateDefaultKeyPairFiles",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/logout": {
            "get": {
                "operationId": "logout",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/mime-types": {
            "get": {
                "operationId": "getAllDocumentCategories_1",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MimeType"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mime-type-resource"
                ]
            }
        },
        "/api/mip/labels/assignment-status": {
            "post": {
                "operationId": "getLabelAssigmentStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MipLabelVerifyDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelAssignmentStatusDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mip-label-resource"
                ]
            }
        },
        "/api/mip/labels/fetch": {
            "get": {
                "operationId": "fetchMipLabels",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MIPLabelDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mip-label-resource"
                ]
            }
        },
        "/api/mip/labels/import": {
            "post": {
                "operationId": "importMipLabels",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MIPLabelDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mip-label-resource"
                ]
            }
        },
        "/api/mip/labels/list": {
            "get": {
                "operationId": "listMipLabels",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MIPLabelDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mip-label-resource"
                ]
            }
        },
        "/api/mip/labels/tags": {
            "post": {
                "operationId": "saveTags",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MIPLabelTagLiteDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/MIPLabelDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mip-label-resource"
                ]
            }
        },
        "/api/mip/labels/{id}": {
            "get": {
                "operationId": "getMipLabel",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/MIPLabelDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "mip-label-resource"
                ]
            }
        },
        "/api/named-entities": {
            "get": {
                "operationId": "getAllNamedEntities",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NamedEntityDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "named-entity-resource"
                ]
            },
            "post": {
                "operationId": "createNamedEntity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NamedEntityDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/NamedEntityDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "named-entity-resource"
                ]
            },
            "put": {
                "operationId": "updateNamedEntity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NamedEntityDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/NamedEntityDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "named-entity-resource"
                ]
            }
        },
        "/api/named-entities/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_4",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "named-entity-resource"
                ]
            }
        },
        "/api/named-entities/{id}": {
            "get": {
                "operationId": "getNamedEntity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/DataClassDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DictionaryDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NamedEntityDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RegexDTO"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "named-entity-resource"
                ]
            }
        },
        "/api/nlp": {
            "post": {
                "operationId": "processDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NlpClientRequestDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "nlp-service-resource"
                ]
            }
        },
        "/api/nlp/language": {
            "get": {
                "description": "Requests the loaded language and model at the nlp-server sides and nlp-server\nresponds with its current configuration. The response contains information\nabout the loaded language and model on the nlp-server.\n",
                "operationId": "getLanguage",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NlpServerLanguageInfo"
                                }
                            }
                        },
                        "description": "Successfully fetched nlp-server language information."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Provides information about the language code and model that have been loaded on the nlp-server.",
                "tags": [
                    "nlp-service-resource"
                ]
            }
        },
        "/api/oauth2/authenticate": {
            "post": {
                "operationId": "authorizeOAuth2",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AzureAdLoginVM"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/on-demand-classifiers/{datasourceId}/jobs": {
            "post": {
                "description": "Request to create an On-Demand Classifier job.",
                "operationId": "createJob",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "files",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/OnDemandClassifierJobDTO"
                                }
                            }
                        },
                        "description": "Classification job accepted, provides a job id for tracking its progress."
                    }
                },
                "summary": "Create an On-Demand Classifier job.",
                "tags": [
                    "on-demand-classifier-resource"
                ]
            }
        },
        "/api/on-demand-classifiers/{datasourceId}/jobs/{jobId}": {
            "delete": {
                "description": "Request to delete an On-Demand Classifier job by id.",
                "operationId": "deleteJob",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Classification job deleted."
                    }
                },
                "summary": "Delete On-Demand Classifier job by id.",
                "tags": [
                    "on-demand-classifier-resource"
                ]
            },
            "get": {
                "description": "Request to get an On-Demand Classifier job by id.",
                "operationId": "findJob",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/OnDemandClassifierJobDTO"
                                }
                            }
                        },
                        "description": "Classification job retrieved."
                    }
                },
                "summary": "Get On-Demand Classifier job by id.",
                "tags": [
                    "on-demand-classifier-resource"
                ]
            }
        },
        "/api/organizational-units": {
            "get": {
                "operationId": "getAllOrganizationalUnits",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationalUnitDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "organizational-unit-resource"
                ]
            },
            "post": {
                "operationId": "createOrganizationalUnit",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationalUnitDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationalUnitDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "organizational-unit-resource"
                ]
            },
            "put": {
                "operationId": "updateOrganizationalUnit",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationalUnitDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationalUnitDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "organizational-unit-resource"
                ]
            }
        },
        "/api/organizational-units/{id}": {
            "delete": {
                "operationId": "deleteOrganizationalUnit",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "organizational-unit-resource"
                ]
            },
            "get": {
                "operationId": "getOrganizationalUnit",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationalUnitDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "organizational-unit-resource"
                ]
            }
        },
        "/api/principal-identifiers": {
            "get": {
                "operationId": "getPrincipalIdentifiers",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "principal-identifier-resource"
                ]
            }
        },
        "/api/profile-user-permissions": {
            "get": {
                "description": "Fetches the profile user permissions as per given parameters.",
                "operationId": "getAllProfileUserPermissions",
                "parameters": [
                    {
                        "in": "query",
                        "name": "profileId",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProfileUserPermissionDTO"
                                    }
                                }
                            }
                        },
                        "description": "ProfileUserPermissions fetched successfully"
                    },
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the profile user permissions",
                "tags": [
                    "profile-user-permission-resource"
                ]
            },
            "post": {
                "description": "Creates a new profile user permission as per ProfileUserPermissionDTO schema and\nraises a 400 BAD Request for invalid input.",
                "operationId": "createProfileUserPermission",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileUserPermissionDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileUserPermissionDTO"
                                }
                            }
                        },
                        "description": "ProfileUserPermission created successfully"
                    },
                    "400": {
                        "description": "Invalid input values"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Creates a new profile user permission",
                "tags": [
                    "profile-user-permission-resource"
                ]
            },
            "put": {
                "description": "Update an existing profile user permission as per ProfileUserPermissionDTO schema and\nraises a 400 BAD Request for invalid input.",
                "operationId": "updateProfileUserPermission",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileUserPermissionDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileUserPermissionDTO"
                                }
                            }
                        },
                        "description": "ProfileUserPermission updated successfully"
                    },
                    "400": {
                        "description": "Invalid input values"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "SettingProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Updates a existing profile user permission",
                "tags": [
                    "profile-user-permission-resource"
                ]
            }
        },
        "/api/profile-user-permissions/{id}": {
            "delete": {
                "description": "Delete an existing profile user permission for given id.",
                "operationId": "deleteProfileUserPermission",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProfileUserPermission deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input value"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "ProfileUserPermission was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Deletes a existing profile user permission by id",
                "tags": [
                    "profile-user-permission-resource"
                ]
            },
            "get": {
                "description": "Fetches the ProfileUserPermission for a given id.\n If any of the provided id does not exist in the ProfileUserPermission,\n     it will throw error",
                "operationId": "getProfileUserPermission",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileUserPermissionDTO"
                                }
                            }
                        },
                        "description": "ProfileUserPermission fetched"
                    },
                    "400": {
                        "description": "ProfileUserPermission id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "ProfileUserPermission was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches an existing profile user permission by id",
                "tags": [
                    "profile-user-permission-resource"
                ]
            }
        },
        "/api/queries": {
            "post": {
                "description": "Saves a new query as per SavedQueryDto schema or throws error for invalid input.",
                "operationId": "createEntity_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SavedQueryDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedQueryDto"
                                }
                            }
                        },
                        "description": "Query created successfully"
                    },
                    "400": {
                        "description": "Invalid input values"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Saves a new query",
                "tags": [
                    "query-resource"
                ]
            },
            "put": {
                "description": "Updates an existing query as per SavedQueryDto schema or throws error for invalid input.",
                "operationId": "updateEntity_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SavedQueryDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedQueryDto"
                                }
                            }
                        },
                        "description": "SavedQuery updated successfully"
                    },
                    "400": {
                        "description": "Invalid input values"
                    },
                    "404": {
                        "description": "SavedQuery was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Updates an existing query",
                "tags": [
                    "query-resource"
                ]
            }
        },
        "/api/queries/{id}": {
            "delete": {
                "description": "Delete a query based on the provided id or throws error for invalid input.",
                "operationId": "deleteEntity_1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SavedQuery successfully deleted"
                    },
                    "400": {
                        "description": "Invalid input value"
                    },
                    "404": {
                        "description": "SavedQuery was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Deletes an existing query",
                "tags": [
                    "query-resource"
                ]
            }
        },
        "/api/rba-groups": {
            "get": {
                "description": "This endpoint allows you to retrieve a list of data source groups.\nDatasource groups are used to manage and control access to datasources.\nThis GET request provides information about existing datasource groups,\naiding in datasource access control and user management.",
                "operationId": "getAllGroups",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successful response with a list of datasource groups"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    },
                    "404": {
                        "description": "Datasource group not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Request to Retrieve Datasource Groups",
                "tags": [
                    "record-based-access-group-resource"
                ]
            },
            "post": {
                "description": "This endpoint allows you to create a new datasource group.\nDatasource groups are used to manage and control access to datasources.\nUse this POST request to define a new datasource group and its associated attributes.",
                "operationId": "createGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupDTO"
                                }
                            }
                        },
                        "description": "Datasource group successfully created"
                    },
                    "400": {
                        "description": "Bad request, invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Create a New Datasource Group",
                "tags": [
                    "record-based-access-group-resource"
                ]
            },
            "put": {
                "operationId": "updateGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupUpdateDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "record-based-access-group-resource"
                ]
            }
        },
        "/api/rba-groups/deactivate/{id}": {
            "put": {
                "operationId": "deActivateGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "record-based-access-group-resource"
                ]
            }
        },
        "/api/rba-groups/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_3",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "record-based-access-group-resource"
                ]
            }
        },
        "/api/rba-groups/{id}": {
            "delete": {
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "record-based-access-group-resource"
                ]
            },
            "get": {
                "operationId": "getGroup",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "record-based-access-group-resource"
                ]
            }
        },
        "/api/realm-accounts": {
            "get": {
                "description": "Retrieves all the realm accounts that have been discovered",
                "operationId": "getAllTags_1",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RealmAccountDTO"
                                    }
                                }
                            }
                        },
                        "description": "Realm accounts are retrieved"
                    }
                },
                "summary": "Retrieve all realm accounts",
                "tags": [
                    "realm-account-resource"
                ]
            }
        },
        "/api/redaction-rule-sets": {
            "get": {
                "operationId": "getAllRedactionRuleSets",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RedactionRuleSetDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            },
            "post": {
                "operationId": "createRedactionRuleSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleSetDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedactionRuleSetDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            },
            "put": {
                "operationId": "updateRedactionRuleSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleSetDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedactionRuleSetDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rule-sets/clone": {
            "put": {
                "operationId": "cloneRedactionRuleSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleSetCloneDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rule-sets/create-redaction-rules": {
            "put": {
                "operationId": "addRedactionRulesOrder",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleWithDataClassesDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rule-sets/delete-redaction-rules": {
            "delete": {
                "operationId": "removeRedactionRulesOrder",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleSetsDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rule-sets/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_2",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rule-sets/update-order": {
            "put": {
                "operationId": "updateRedactionRulesOrder",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleSetsDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rule-sets/{id}": {
            "get": {
                "operationId": "getRedactionRuleSet",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-set-resource"
                ]
            }
        },
        "/api/redaction-rules/multi-update": {
            "put": {
                "operationId": "multiUpdate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedactionRuleMultiUpdateDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedactionRuleMultiUpdateDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-resource"
                ]
            }
        },
        "/api/redaction-rules/set-status": {
            "put": {
                "operationId": "updateDeleteStatus_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-resource"
                ]
            }
        },
        "/api/redaction-rules/{id}": {
            "get": {
                "operationId": "getRedactionRuleDTO",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedactionRuleDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "redaction-rule-resource"
                ]
            }
        },
        "/api/regex-validators": {
            "get": {
                "description": "Gets all regex validators supported by the Data Xray",
                "operationId": "getAllRegexValidators",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "uniqueItems": true,
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "A validator that can be applied to the output of a regular expression",
                                        "enum": [
                                            "LUHN_ALGORITHM",
                                            "JP_MY_NUMBER_PERSONAL_CHECKSUM"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successfully retrieved the validators"
                    }
                },
                "summary": "Gets all regex validators supported by the Data Xray",
                "tags": [
                    "regex-validator-resource"
                ]
            }
        },
        "/api/regexes": {
            "get": {
                "operationId": "getAllRegexes",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegexDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            },
            "post": {
                "operationId": "createRegex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegexDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            },
            "put": {
                "operationId": "updateRegex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegexDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/export": {
            "post": {
                "operationId": "exportRegex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataClassExportDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/groups": {
            "put": {
                "operationId": "updateCapturingGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegexGroupsDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/import": {
            "post": {
                "operationId": "importRegex",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DataClassImportDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/set-status": {
            "put": {
                "operationId": "updateDeleteStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteStatusDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/validate-regex": {
            "post": {
                "operationId": "validateRegexes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegexTestRequestDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexTestResponseDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/validator": {
            "put": {
                "description": "Update the validator associated with a regex",
                "operationId": "updateRegexValidator",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegexValidatorDTO"
                            }
                        }
                    },
                    "description": "Patch to apply to the regex in order to update its validator",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "Successfully updated the regex"
                    },
                    "403": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "Authentication error"
                    }
                },
                "summary": "Update the validator associated with a regex",
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/value": {
            "put": {
                "operationId": "updateRegexValue",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegexValueDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/{id}": {
            "get": {
                "operationId": "getRegex",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/DataClassDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DictionaryDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NamedEntityDTO"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RegexDTO"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/regexes/{id}/clone": {
            "post": {
                "operationId": "cloneRegex",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            }
                        },
                        "description": "Created"
                    }
                },
                "tags": [
                    "regex-resource"
                ]
            }
        },
        "/api/register": {
            "post": {
                "operationId": "registerAccount",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ManagedUserVM"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/reset-totp/{username}": {
            "put": {
                "operationId": "adminResetTotp",
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        },
        "/api/scans": {
            "get": {
                "operationId": "getAllScans",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datasourceId",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DatasourceScanDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "scan-resource"
                ]
            }
        },
        "/api/settings-profiles": {
            "get": {
                "description": "Fetches the settings profile as per given parameters.",
                "operationId": "listEntities",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BASE",
                                "PRIVATE",
                                "PUBLIC"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SettingsProfileDTO"
                                    }
                                }
                            }
                        },
                        "description": "SettingsProfiles fetched successfully"
                    },
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the settings profiles",
                "tags": [
                    "settings-profile-resource"
                ]
            },
            "post": {
                "description": "Creates a new setting profile as per SettingProfileDTO schema and\nraises a 400 BAD Request for invalid input.",
                "operationId": "createEntity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsProfileCreateDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsProfileDTO"
                                }
                            }
                        },
                        "description": "SettingProfile created successfully"
                    },
                    "400": {
                        "description": "Invalid input values"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Creates a new settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            },
            "put": {
                "description": "Update an existing setting profile as per SettingProfileDTO schema and\nraises a 400 BAD Request for invalid input.",
                "operationId": "updateEntity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsProfileDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsProfileDTO"
                                }
                            }
                        },
                        "description": "SettingProfile updated successfully"
                    },
                    "400": {
                        "description": "Invalid input values"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "SettingProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Updates a existing settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/datasources": {
            "get": {
                "description": "Gets the Datasources with SettingsProfile.",
                "operationId": "getSettingsProfileDatasourceEntries",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SettingsProfileDatasourceEntryDTO"
                                    }
                                }
                            }
                        },
                        "description": "Datasources fetched"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Get the datasources with settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/settings/index": {
            "post": {
                "description": "Updates the indexConfig for a given SettingsProfile.\n If any of the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "updateProfileIndexSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndexConfigDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexConfigDTO"
                                }
                            }
                        },
                        "description": "IndexConfig updated"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Updates the index settings for a given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{id}": {
            "delete": {
                "description": "Delete an existing setting profile for given id.",
                "operationId": "deleteEntity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SettingProfile deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input value"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "SettingProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Deletes a existing settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            },
            "get": {
                "description": "Fetches the SettingsProfile for a given id.\n If any of the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "getEntity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsProfileDTO"
                                }
                            }
                        },
                        "description": "SettingsProfile fetched"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the existing settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{id}/add-data-classes": {
            "post": {
                "description": "Adds data classes for a given SettingsProfile.\n If any of the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "addDataClasses",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Data Classes updated"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Adds data classes for the given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{id}/data-classes": {
            "get": {
                "description": "Lists data classes for a given SettingsProfile.\nReturns an empty list if no data-classes are associated with the profile.",
                "operationId": "listDataClasses",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "uniqueItems": true,
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        },
                        "description": "List of data classes."
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Lists data classes for the given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{id}/query": {
            "delete": {
                "description": "De-associates queries for a given SettingsProfile. If there are no associated queries to the\nSettingsProfile, no action will be executed",
                "operationId": "removeQuery",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query removed"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "De-associates query for the given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{id}/query/{queryId}": {
            "post": {
                "description": "Associates a query with a given SettingsProfile.\nIf any of the provided ids does not exist, it will throw an error",
                "operationId": "addQuery",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "queryId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query updated"
                    },
                    "400": {
                        "description": "SettingsProfile or query id cannot be null"
                    },
                    "404": {
                        "description": "SettingsProfile or query was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Associates a query with the given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{id}/remove-data-classes": {
            "post": {
                "description": "Removes data classes for a given SettingsProfile.\n If any of the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "removeDataClasses",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Data Classes updated"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Removes data classes for the given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{profileId}/datasources": {
            "delete": {
                "description": "Removes the Datasources for a given SettingsProfile.\n If any of the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "removeDatasourceListFromSettingsProfile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "profileId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful removal"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Invalid list of datasource ids"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Removes the datasources for a given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            },
            "put": {
                "description": "Adds the Datasources for a given SettingsProfile.\n If any of the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "addDatasourceListToSettingsProfile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "profileId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful add"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "Invalid list of datasource ids"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Adds the datasources for a given settings profile",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{profileId}/monitor": {
            "post": {
                "description": "Profile monitor flag is set the specified value.",
                "operationId": "toggleMonitorFlagForProfile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "profileId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "flag",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null or request parameter 'flag' is not present"
                    },
                    "403": {
                        "description": "Authentication error"
                    },
                    "404": {
                        "description": "SettingsProfile was not found"
                    }
                },
                "summary": "Toggles monitoring for datasources belonging to a profile..",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings-profiles/{profileId}/settings/index": {
            "get": {
                "description": "Fetches the indexConfig for a given SettingsProfile.\n If the provided id does not exist in the SettingsProfile,\n     it will throw error",
                "operationId": "getProfileIndexSettings",
                "parameters": [
                    {
                        "in": "path",
                        "name": "profileId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexConfigDTO"
                                }
                            }
                        },
                        "description": "IndexConfig fetched"
                    },
                    "400": {
                        "description": "SettingsProfile id cannot be null"
                    },
                    "403": {
                        "description": "Authorization error"
                    },
                    "404": {
                        "description": "IndexConfig was not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Fetches the index settings for a given settings profile id",
                "tags": [
                    "settings-profile-resource"
                ]
            }
        },
        "/api/settings/enabled": {
            "get": {
                "description": "Gets all enabled settings.",
                "operationId": "getAllEnabledSettings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/BooleanSettingDto"
                                            },
                                            {
                                                "$ref": "#/components/schemas/NumberSettingDto"
                                            },
                                            {
                                                "$ref": "#/components/schemas/StringSettingDto"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Gets all enabled settings.",
                "tags": [
                    "dxr-global-setting-resource"
                ]
            }
        },
        "/api/settings/{namespace}": {
            "get": {
                "description": "Gets all settings",
                "operationId": "getAllSettings",
                "parameters": [
                    {
                        "in": "path",
                        "name": "namespace",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/BooleanSettingDto"
                                            },
                                            {
                                                "$ref": "#/components/schemas/NumberSettingDto"
                                            },
                                            {
                                                "$ref": "#/components/schemas/StringSettingDto"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/BooleanSettingDto"
                                            },
                                            {
                                                "$ref": "#/components/schemas/NumberSettingDto"
                                            },
                                            {
                                                "$ref": "#/components/schemas/StringSettingDto"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "summary": "Gets all settings",
                "tags": [
                    "dxr-global-setting-resource"
                ]
            },
            "patch": {
                "description": "Updates settings.",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "in": "path",
                        "name": "namespace",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/BooleanSettingDto"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NumberSettingDto"
                                        },
                                        {
                                            "$ref": "#/components/schemas/StringSettingDto"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully published the settings."
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request."
                    }
                },
                "summary": "Updates settings.",
                "tags": [
                    "dxr-global-setting-resource"
                ]
            }
        },
        "/api/system-token": {
            "put": {
                "operationId": "generateSystemToken",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/system/datasources/ingester/{datasourceId}/file/extract": {
            "get": {
                "operationId": "extractFileContentAsText",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "compositeType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "parentCompositeType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "system-resource"
                ]
            }
        },
        "/api/system/datasources/{id}/folder": {
            "get": {
                "operationId": "getDatasourceFolder",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "folderId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "system-resource"
                ]
            }
        },
        "/api/system/search/pit": {
            "delete": {
                "description": "Deletes the provided Point in Time",
                "operationId": "deletePointInTime",
                "parameters": [
                    {
                        "description": "pointInTime to be deleted",
                        "in": "query",
                        "name": "pointInTime",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the PIT"
                    },
                    "403": {
                        "description": "Authentication error"
                    },
                    "404": {
                        "description": "The provided PIT was not found"
                    }
                },
                "summary": "Deletes a Point in Time",
                "tags": [
                    "system-resource"
                ]
            },
            "post": {
                "description": "Creates a Point in Time based on the provided datasource ids",
                "operationId": "createPointInTime",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "datasource ids to be included in the PIT"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Successfully created the PIT"
                    },
                    "403": {
                        "description": "Authentication error"
                    },
                    "404": {
                        "description": "None of the datasources is indexed"
                    }
                },
                "summary": "Creates a Point in Time",
                "tags": [
                    "system-resource"
                ]
            }
        },
        "/api/system/search/pit/index": {
            "post": {
                "description": "Searches the index using a DSL query including a PIT. The open PIT request and each subsequent search request can return different id; thus always use the most recently received id for the next search request",
                "operationId": "searchIndexByQueryWithPointInTime",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Map of results from index"
                    },
                    "400": {
                        "description": "Malformed DSL query"
                    },
                    "403": {
                        "description": "Authentication error"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Searches ES using a DSL query including a PIT",
                "tags": [
                    "system-resource"
                ]
            }
        },
        "/api/tags": {
            "get": {
                "operationId": "getAllTags",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-resource"
                ]
            },
            "post": {
                "operationId": "createTag",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-resource"
                ]
            },
            "put": {
                "operationId": "updateTag",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-resource"
                ]
            }
        },
        "/api/tags/contains-datasource/{datasource-id}": {
            "get": {
                "description": "Performs a search over all the smart labels associated with given organisation\nand having the provided datasource id in its query.\n",
                "operationId": "getAllSmartTagsAssociatedWithADatasource",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasource-id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "Search results with hits": {
                                        "description": "Search results with hits",
                                        "summary": "Search results with hits",
                                        "value": [
                                            {
                                                "id": 24,
                                                "name": "Smart",
                                                "hexColor": "5c0a41",
                                                "description": "Label",
                                                "type": "SMART",
                                                "savedQueryDtoList": [
                                                    {
                                                        "id": 7,
                                                        "datasourceId": 100,
                                                        "status": "RUNNING",
                                                        "reason": "NOT_PAUSED",
                                                        "query": {
                                                            "query_items": [
                                                                {
                                                                    "parameter": "annotators",
                                                                    "value": "annotation.7",
                                                                    "type": "text",
                                                                    "match_strategy": "exists",
                                                                    "group_id": 0,
                                                                    "group_order": 0
                                                                },
                                                                {
                                                                    "parameter": "annotators",
                                                                    "value": "annotation.4",
                                                                    "type": "text",
                                                                    "match_strategy": "exists",
                                                                    "group_id": 1,
                                                                    "group_order": 0,
                                                                    "operator": "AND"
                                                                },
                                                                {
                                                                    "parameter": "annotators",
                                                                    "value": "annotation.10",
                                                                    "type": "text",
                                                                    "match_strategy": "exists",
                                                                    "group_id": 2,
                                                                    "group_order": 0,
                                                                    "operator": "AND"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful search (may even be empty)."
                    },
                    "400": {
                        "description": "Invalid search request"
                    },
                    "403": {
                        "description": "Authorization error"
                    }
                },
                "summary": "Searches for all the smart labels associated with the given datasource",
                "tags": [
                    "tag-resource"
                ]
            }
        },
        "/api/tags/contains/{annotation-id}": {
            "get": {
                "operationId": "getSmartTagsWithAnnotationId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "annotation-id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasourceId",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "uniqueItems": true,
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-resource"
                ]
            }
        },
        "/api/tags/{id}": {
            "delete": {
                "operationId": "deleteTag",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-resource"
                ]
            },
            "get": {
                "operationId": "getTag",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-resource"
                ]
            }
        },
        "/api/tagset": {
            "get": {
                "operationId": "getAllTagSets",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagSetDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-set-resource"
                ]
            },
            "post": {
                "operationId": "createTagSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagSetDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagSetDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-set-resource"
                ]
            },
            "put": {
                "operationId": "updateTagSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagSetDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagSetDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-set-resource"
                ]
            }
        },
        "/api/tagset/find": {
            "get": {
                "operationId": "findTagSets",
                "parameters": [
                    {
                        "in": "query",
                        "name": "tagIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagSetDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-set-resource"
                ]
            }
        },
        "/api/tagset/{id}": {
            "delete": {
                "operationId": "deleteTagSet",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-set-resource"
                ]
            },
            "get": {
                "operationId": "getTagSet",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagSetDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "tag-set-resource"
                ]
            }
        },
        "/api/token": {
            "get": {
                "operationId": "fetchToken",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenSessionDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            },
            "put": {
                "operationId": "generateToken",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenSessionDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/totp/qrcode": {
            "post": {
                "description": "Gets a boolean value specifying whether a user has multi-factor authentication with\nTOTP enabled or not.",
                "operationId": "generateTotpQrCode",
                "parameters": [
                    {
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginVM"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Returns a secret, totpUri and base64 encoded PNG image with the QR code, i.e.:\n```\n{\"secret\":\"6SLKSBR2LPOY3M73LRIPJPPQWQRMU5JK\",\n \"totpUri\":\"otpauth://totp/Data%20X-Ray:theUser?period=30&digits=6&algorithm=SHA1\n            &secret=6SLKSBR2LPOY3M73LRIPJPPQWQRMU5JK&issuer=Data%20X-Ray\",\n \"qrCode\":\"iVBORw0KGgoAAAANSUhEUgAAAMgAAADIAQAAAACFI5MzAAACAElEQVR4Xu2WW2rEMAxFDd6WQVsXeF\n           sC9x5lMtMW5k+CFsaYPHwC1uNKzjjvxvi98Bwf8ueJjzHdts993GLMXGggW9PXMB+2Y56YLHQQ7c0I\n           izW3bEljusjxGVNPPnOhiYQdzaM7s4kAlatYy4RzuYMgiAzpPX5op44wlDMZgR3SyVPxtcRNSVuai5\n           1FYt22lZIdS2pfvGpNqRu3p7VEaVJhQfSJpmL6yFwtUaKu3aeLyFHTvYGocodKN1RZ6hhEdvUQNj2U\n           r24I0VBKA7llYdy0uLP5lRPlbfFKP0cjRPahkFKCa1fquEiGyKSFSIXpYiB9y1bYQFDIQO5EVoKPp6\n           e1ZBPIXFUHlCEqNLttqyUzS1b1RElF6r2BpC7sOpTywrctRDU1mARTu/NdB0Ee6qxOh9jpLK6WE/mG\n           ZwfFp1oMsTQQrekRkah81dLzN6WD4Ksiagpu5NH0tKCSRNZutnIjvvSK3UA0+CtR3S4juOTuylwt2V\n           dAB+8BRJMNRMwzmsoc2+/XiVFLkIjyxVmx05y4I1pKOFnVyuUroZQ+lMnTQBgkzg7lKzeVyA7ibIkA\n           LzEqnNlwy4muKNEUyzyfNhnsIDoxOPoyZ5qvyqoncs9RBlbQk66I1pPjbE7ny0auLDaQjCh1G5y1Ob\n           7HuoqgELc0gvqaGHNZUEvejA/5r+QLouXmHWaqBAQAAAAASUVORK5CYII=\"}\n```"
                    }
                },
                "summary": "Generates a QR code for TOTP authentication",
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/totp/{username}/enabled": {
            "get": {
                "description": "Gets a boolean value specifying whether a user has multi-factor authentication with\nTOTP enabled or not, as well as whether multi-factor authentication is required or not",
                "operationId": "isUserTotpEnabled",
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "Returns true if a user has multi-factor authentication with TOTP enabled,\nfalse otherwise; i.e: `{\"mfaTotpRequired\":true,\"mfaTotpEnabled\": true}`"
                    }
                },
                "summary": "Verifies if a user has multi-factor authentication with TOTP enabled",
                "tags": [
                    "user-jwt-controller"
                ]
            }
        },
        "/api/user-directory/{datasourceConnectorTypeId}": {
            "post": {
                "description": "Retrieves the list of accounts for the provided connector type.",
                "operationId": "getUserDirectory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceConnectorTypeId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "AWS user connector access key id": {
                                    "description": "AWS user connector access key id",
                                    "value": "aws_access_key_id: value"
                                },
                                "AWS user connector authentication mode": {
                                    "description": "AWS user connector authentication mode",
                                    "value": "aws_authentication_mode: ACCESS_KEY or INSTANCE_PROFILE"
                                },
                                "AWS user connector region": {
                                    "description": "AWS user connector region",
                                    "value": "aws_region: value"
                                },
                                "AWS user connector secret key": {
                                    "description": "AWS user connector secret key",
                                    "value": "aws_secret_access_key: value"
                                }
                            },
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "description": "optional set of key-value pairs that should be used for connector initialization"
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConnectorUserDTO"
                                    }
                                }
                            }
                        },
                        "description": "Successfully published the settings."
                    },
                    "400": {
                        "description": "Bad request."
                    }
                },
                "summary": "Retrieves the list of accounts.",
                "tags": [
                    "user-directory-resource"
                ]
            }
        },
        "/api/users": {
            "get": {
                "operationId": "getAllUsers",
                "parameters": [
                    {
                        "description": "Zero-based page index (0..N)",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "description": "The size of the page to be returned",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserDTO"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-resource"
                ]
            },
            "post": {
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserWithOrganizationDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-resource"
                ]
            },
            "put": {
                "operationId": "updateUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserWithOrganizationDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDTO"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-resource"
                ]
            }
        },
        "/api/users/authorities": {
            "get": {
                "operationId": "getAuthorities",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-resource"
                ]
            }
        },
        "/api/users/delete/{login}": {
            "delete": {
                "operationId": "deleteUserByStatus",
                "parameters": [
                    {
                        "in": "path",
                        "name": "login",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-resource"
                ]
            }
        },
        "/api/users/{login}": {
            "get": {
                "operationId": "getUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "login",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "tags": [
                    "user-resource"
                ]
            }
        },
        "/api/verify": {
            "post": {
                "operationId": "verifyToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "account-resource"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Aggregation": {
                "type": "object",
                "properties": {
                    "aggs_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AggregationItem"
                        }
                    },
                    "query_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QueryItem"
                        }
                    }
                }
            },
            "AggregationItem": {
                "type": "object",
                "properties": {
                    "aggregationType": {
                        "type": "string",
                        "enum": [
                            "filter",
                            "function"
                        ]
                    },
                    "matchStrategy": {
                        "type": "string",
                        "enum": [
                            "EXISTS",
                            "COLLECT",
                            "RANGE",
                            "AVG",
                            "PERCENTILES",
                            "EXACT",
                            "SCRIPT",
                            "CARDINALITY"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "parameter": {
                        "type": "string"
                    },
                    "parameterType": {
                        "type": "string",
                        "enum": [
                            "empty",
                            "text",
                            "number",
                            "boolean",
                            "date",
                            "number_list",
                            "text_list",
                            "date_list"
                        ]
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "AnnotatorDTO": {
                "type": "object",
                "properties": {
                    "category_color": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id_name": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "AnnotatorStatisticsDTO": {
                "type": "object",
                "properties": {
                    "annotatorId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "annotatorName": {
                        "type": "string"
                    },
                    "documentCount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "AnnotatorsDomainDocumentCountDTO": {
                "type": "object",
                "properties": {
                    "annotatorIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "documentCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "domainId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "domainName": {
                        "type": "string"
                    }
                }
            },
            "AuthenticationResponse": {
                "type": "object",
                "properties": {
                    "expires_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id_token": {
                        "type": "string"
                    }
                }
            },
            "AzureAdLoginVM": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "claims": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "loginMode": {
                        "type": "string"
                    },
                    "otpCode": {
                        "type": "string"
                    },
                    "password": {
                        "maxLength": 1000,
                        "minLength": 4,
                        "type": "string"
                    },
                    "rememberMe": {
                        "type": "boolean"
                    },
                    "username": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string"
                    }
                }
            },
            "BooleanSettingDto": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DxrGlobalSettingDto"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "BucketDTOLong": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "to": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BucketDTOString": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "from": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    }
                }
            },
            "BulkCasefileDTO": {
                "required": [
                    "casefileId",
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "casefileId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Query"
                    }
                }
            },
            "BulkTagActionDTO": {
                "required": [
                    "action",
                    "endedAt",
                    "jobId",
                    "status",
                    "submittedAt"
                ],
                "type": "object",
                "properties": {
                    "abortReason": {
                        "type": "string"
                    },
                    "action": {
                        "type": "string"
                    },
                    "attempts": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "datasourceListSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "datasources": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "endedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "jobId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "IN_PROGRESS",
                            "ERROR",
                            "COMPLETED"
                        ]
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/PairStringString"
                        }
                    },
                    "userHasDatasourceAccess": {
                        "type": "boolean"
                    }
                }
            },
            "BulkTagActionResponse": {
                "type": "object",
                "properties": {
                    "orgJobs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkTagActionDTO"
                        }
                    },
                    "orgQueuedJobCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "orgRunningJobCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalQueuedJobCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalRunningJobCount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BulkTagRequest": {
                "required": [
                    "filter",
                    "tags"
                ],
                "type": "object",
                "properties": {
                    "datasourceIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Query"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "CasefileDto": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CasefileEntriesDTO": {
                "required": [
                    "casefileId",
                    "casefileItems"
                ],
                "type": "object",
                "properties": {
                    "casefileId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "casefileItems": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CasefileItemDTO"
                        }
                    }
                }
            },
            "CasefileEntryDTO": {
                "required": [
                    "casefileId",
                    "datasource",
                    "objectId",
                    "objectName"
                ],
                "type": "object",
                "properties": {
                    "casefileId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasource": {
                        "$ref": "#/components/schemas/DatasourceDTO"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string"
                    },
                    "tagDTOS": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagDTO"
                        }
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "CasefileEntryRequestDTO": {
                "required": [
                    "casefileId",
                    "datasourceId",
                    "objectId",
                    "objectName"
                ],
                "type": "object",
                "properties": {
                    "casefileId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "CasefileEntryTagRequestDTO": {
                "required": [
                    "id",
                    "tagIds"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "CasefileItemDTO": {
                "required": [
                    "datasourceId",
                    "objectId",
                    "objectName"
                ],
                "type": "object",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "CasefileUserDTO": {
                "required": [
                    "accessLevel",
                    "casefileId",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string"
                    },
                    "casefileId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "groupIdList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "principalIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "CasefileWithEntriesDto": {
                "required": [
                    "casefileEntries",
                    "organizationalUnit"
                ],
                "type": "object",
                "properties": {
                    "casefileEntries": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CasefileEntryDTO"
                        }
                    },
                    "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationalUnit": {
                        "$ref": "#/components/schemas/OrganizationalUnitDTO"
                    }
                }
            },
            "CasefileWithUserAccessLevelDto": {
                "required": [
                    "accessLevel"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string"
                    },
                    "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "totalEntries": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "CasefilesUsersDTO": {
                "required": [
                    "accessLevel"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string"
                    },
                    "casefileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "CategorizationResult": {
                "type": "object",
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/DocumentCategoryDTO"
                    },
                    "languageModelResponse": {
                        "type": "string"
                    }
                }
            },
            "CategorizeDocumentErrorMessage": {
                "type": "object",
                "properties": {
                    "errorType": {
                        "type": "string",
                        "enum": [
                            "TEXT_CATEGORIZATION",
                            "TEXT_EXTRACTION",
                            "DISPATCH_FAILED",
                            "DOCUMENT_SEARCH_FAILED",
                            "DOCUMENT_LIMIT_EXCEEDED"
                        ]
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "CategorizeDocumentsEstimatedCost": {
                "type": "object",
                "properties": {
                    "categorizingDocumentsCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "currencyUnit": {
                        "type": "string"
                    },
                    "estimatedCost": {
                        "type": "number"
                    },
                    "maxDocumentsPerJob": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "mode": {
                        "type": "string",
                        "enum": [
                            "NOOP",
                            "SMALLEST_LEXICOGRAPHICALLY",
                            "OPENAI",
                            "AZURE_OPENAI",
                            "OLLAMA",
                            "AWS_BEDROCK"
                        ]
                    }
                }
            },
            "CategorizeDocumentsJobStats": {
                "type": "object",
                "properties": {
                    "orgQueuedJobCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "orgRunningJobCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalQueuedJobCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalRunningJobCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "CategorizeDocumentsRequest": {
                "required": [
                    "mode"
                ],
                "type": "object",
                "properties": {
                    "dataObjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataObjectDTO"
                        }
                    },
                    "datasourceIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "mode": {
                        "type": "string",
                        "enum": [
                            "document_list",
                            "query"
                        ]
                    },
                    "query": {
                        "$ref": "#/components/schemas/Query"
                    }
                }
            },
            "CategoryStatisticsDTO": {
                "type": "object",
                "properties": {
                    "categoryId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "categoryName": {
                        "type": "string"
                    },
                    "documentCount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ClientOrgUnitDatasourceParamDTO": {
                "required": [
                    "connectorTypeId",
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "connectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "encrypted": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "ClientOrgUnitDatasourceParamDTOUpdate": {
                "required": [
                    "connectorTypeId",
                    "id",
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "connectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "encrypted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "ConnectorUserDTO": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "fullName": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "CsvExportRequestDTO": {
                "required": [
                    "dsIds",
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "dsIds": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Query"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "CurrentIndexFieldsSettingVM": {
                "type": "object",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fieldsValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PairStringString"
                        }
                    }
                }
            },
            "DXRIndexAggregationRequest": {
                "type": "object",
                "properties": {
                    "aggregation": {
                        "$ref": "#/components/schemas/Aggregation"
                    },
                    "datasourceIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "mode": {
                        "type": "string",
                        "enum": [
                            "ELASTICSEARCH",
                            "DXR_JSON_QUERY"
                        ]
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "trackTotalHits": {
                        "type": "boolean"
                    }
                }
            },
            "DXRIndexedFilesSearchRequest": {
                "type": "object",
                "properties": {
                    "datasourceIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "excludedFields": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Query"
                    },
                    "mode": {
                        "type": "string",
                        "enum": [
                            "ELASTICSEARCH",
                            "DXR_JSON_QUERY"
                        ]
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SortTerm"
                        }
                    }
                }
            },
            "DataCategoryDTO": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "hexColor": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "DataCategoryListResponseDTO": {
                "type": "object",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataCategoryDTO"
                        }
                    },
                    "readOnlyCategories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataCategoryDTO"
                        }
                    }
                }
            },
            "DataClassDTO": {
                "required": [
                    "description",
                    "disableCategory",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "dataCategoryDTO": {
                        "$ref": "#/components/schemas/DataCategoryDTO"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disableCategory": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "discriminator": {
                    "propertyName": "type"
                }
            },
            "DataClassExportDTO": {
                "required": [
                    "idList"
                ],
                "type": "object",
                "properties": {
                    "idList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "DataClassImportDTO": {
                "required": [
                    "canOverwrite",
                    "uploadFile"
                ],
                "type": "object",
                "properties": {
                    "canOverwrite": {
                        "type": "boolean"
                    },
                    "uploadFile": {
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "DataClassesCategoryDTO": {
                "type": "object",
                "properties": {
                    "dataCategoryId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "dataClassIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "DataObjectDTO": {
                "required": [
                    "dataObjectId",
                    "datasourceId"
                ],
                "type": "object",
                "properties": {
                    "dataObjectId": {
                        "type": "string"
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "DatasourceAttributeValueDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "description": "The Datasource entity."
            },
            "DatasourceAttributesDTO": {
                "required": [
                    "datasourceConnectorTypeAttributeId",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "datasourceConnectorTypeAttributeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "DatasourceBrowseDTO": {
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "billingCategory": {
                        "type": "string",
                        "enum": [
                            "PREMIUM",
                            "CLOUD",
                            "DEMO"
                        ]
                    },
                    "dataClasses": {
                        "uniqueItems": true,
                        "type": "array",
                        "deprecated": true,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/DataClassDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/NamedEntityDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            ]
                        }
                    },
                    "datasourceConnectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceConnectorTypeName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "indexStatus": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "monitorable": {
                        "type": "boolean"
                    },
                    "monitoringEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rawTextEnabled": {
                        "type": "boolean"
                    },
                    "settingsProfile": {
                        "$ref": "#/components/schemas/SettingsProfileDTO"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "DatasourceConnectorTypeAttributeDTO": {
                "type": "object",
                "properties": {
                    "datasourceConnectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "encrypted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "isRequired": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Default values are url, login or password."
                    },
                    "uiConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "description": "Optional attribute field for client connector attributes"
            },
            "DatasourceConnectorTypeDTO": {
                "required": [
                    "billingCategory",
                    "datasourceConnectorTypeAttributes",
                    "indexCompatible",
                    "monitorable",
                    "structured"
                ],
                "type": "object",
                "properties": {
                    "available": {
                        "type": "boolean"
                    },
                    "billingCategory": {
                        "type": "string",
                        "enum": [
                            "PREMIUM",
                            "CLOUD",
                            "DEMO"
                        ]
                    },
                    "browsable": {
                        "type": "boolean"
                    },
                    "clientDatasourceConnectorTypeAttributes": {
                        "type": "array",
                        "description": "Optional attribute field for client connector attributes",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceConnectorTypeAttributeDTO"
                        }
                    },
                    "datasourceConnectorTypeAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceConnectorTypeAttributeDTO"
                        }
                    },
                    "dbDatasourceFactoryType": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "indexCompatible": {
                        "type": "boolean"
                    },
                    "monitorable": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name attribute."
                    },
                    "structured": {
                        "type": "boolean"
                    }
                },
                "description": "The DatasourceConnectorType entity."
            },
            "DatasourceDTO": {
                "type": "object",
                "properties": {
                    "billingCategory": {
                        "type": "string",
                        "enum": [
                            "PREMIUM",
                            "CLOUD",
                            "DEMO"
                        ]
                    },
                    "dataClasses": {
                        "uniqueItems": true,
                        "type": "array",
                        "deprecated": true,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/DataClassDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/NamedEntityDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            ]
                        }
                    },
                    "datasourceConnectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceConnectorTypeName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "monitorable": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "settingsProfile": {
                        "$ref": "#/components/schemas/SettingsProfileDTO"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    }
                },
                "description": "The Datasource entity."
            },
            "DatasourceDataClassDTO": {
                "required": [
                    "datasourceId"
                ],
                "type": "object",
                "properties": {
                    "dataClassIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "profileId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "DatasourceMetadataItem": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "DatasourceScanDTO": {
                "required": [
                    "active",
                    "datasourceId",
                    "history",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "history": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScanHistoryItemDTO"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "CRAWLING",
                            "WAITING_FOR_DATASOURCE_RESTORE",
                            "REDISPATCHING",
                            "WAITING_FOR_INDEXING_TO_COMPLETE",
                            "FINISHED",
                            "REDISPATCHED",
                            "ABORTED"
                        ]
                    }
                }
            },
            "DatasourceSearchDTO": {
                "required": [
                    "searchTerm",
                    "uniqueId"
                ],
                "type": "object",
                "properties": {
                    "datasourceDTOList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceDTO"
                        }
                    },
                    "searchTerm": {
                        "type": "string"
                    },
                    "uniqueId": {
                        "type": "string"
                    }
                },
                "description": "Datasource search entity."
            },
            "DatasourceUserPermissionDTO": {
                "required": [
                    "accessLevel",
                    "datasourceId",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "DatasourceVerboseDTO": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceAttributeValueDTO"
                        }
                    },
                    "browsable": {
                        "type": "boolean"
                    },
                    "connectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "connectorTypeIndexCompatible": {
                        "type": "boolean"
                    },
                    "connectorTypeName": {
                        "type": "string"
                    },
                    "dbFactoryTypeId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceMetadataItem"
                        }
                    },
                    "monitorable": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationalUnitId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "organizationalUnitName": {
                        "type": "string"
                    },
                    "settingsProfile": {
                        "$ref": "#/components/schemas/SettingsProfileDTO"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    }
                },
                "description": "The Datasource entity."
            },
            "DatasourceWithAttributesDTO": {
                "required": [
                    "datasourceAttributesDTOList"
                ],
                "type": "object",
                "properties": {
                    "billingCategory": {
                        "type": "string",
                        "enum": [
                            "PREMIUM",
                            "CLOUD",
                            "DEMO"
                        ]
                    },
                    "dataClasses": {
                        "uniqueItems": true,
                        "type": "array",
                        "deprecated": true,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/DataClassDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/NamedEntityDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            ]
                        }
                    },
                    "datasourceAttributesDTOList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceAttributesDTO"
                        }
                    },
                    "datasourceConnectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceConnectorTypeName": {
                        "type": "string"
                    },
                    "dsOwnerId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "monitorable": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "settingsProfile": {
                        "$ref": "#/components/schemas/SettingsProfileDTO"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    }
                }
            },
            "DatasourceWithConnectorTypeAttributesDTO": {
                "type": "object",
                "properties": {
                    "billingCategory": {
                        "type": "string",
                        "enum": [
                            "PREMIUM",
                            "CLOUD",
                            "DEMO"
                        ]
                    },
                    "dataClasses": {
                        "uniqueItems": true,
                        "type": "array",
                        "deprecated": true,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/DataClassDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/DictionaryDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/NamedEntityDTO"
                                },
                                {
                                    "$ref": "#/components/schemas/RegexDTO"
                                }
                            ]
                        }
                    },
                    "datasourceConnectorTypeAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DatasourceConnectorTypeAttributeDTO"
                        }
                    },
                    "datasourceConnectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceConnectorTypeName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "monitorable": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "settingsProfile": {
                        "$ref": "#/components/schemas/SettingsProfileDTO"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    }
                }
            },
            "DeleteStatusCasefileEntryDTO": {
                "required": [
                    "casefileList",
                    "idList"
                ],
                "type": "object",
                "properties": {
                    "casefileList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "datasourceStatus": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    },
                    "idList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "status": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteStatusDTO": {
                "required": [
                    "idList"
                ],
                "type": "object",
                "properties": {
                    "datasourceStatus": {
                        "type": "string",
                        "enum": [
                            "ENABLED",
                            "ARCHIVING",
                            "ARCHIVED",
                            "DELETING",
                            "DELETED",
                            "CONNECTION_BROKEN",
                            "REMOVING_INDEXED_DATA"
                        ]
                    },
                    "idList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "status": {
                        "type": "boolean"
                    }
                }
            },
            "DictionaryDTO": {
                "required": [
                    "description",
                    "disableCategory",
                    "isCaseSensitive",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DataClassDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "isCaseSensitive": {
                                "type": "boolean"
                            },
                            "values": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "DictionaryEntriesDTO": {
                "required": [
                    "dictionaryId"
                ],
                "type": "object",
                "properties": {
                    "dictionaryId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "values": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "DocumentCategorizerOrgUnitSettingsDTO": {
                "required": [
                    "prompt"
                ],
                "type": "object",
                "properties": {
                    "lastModifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "prompt": {
                        "type": "string"
                    }
                }
            },
            "DocumentCategoryDTO": {
                "required": [
                    "description",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "DocumentStatusCountsDTO": {
                "type": "object",
                "properties": {
                    "categorizedDocuments": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "classifiedDocuments": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "discoveredDocuments": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "documentsWithFindings": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "DxrGlobalSettingDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "sensitive": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "discriminator": {
                    "propertyName": "type"
                }
            },
            "DxrSyncJobDTO": {
                "required": [
                    "attempts",
                    "jobId",
                    "jobType",
                    "lastModifiedAt",
                    "status",
                    "submittedAt"
                ],
                "type": "object",
                "properties": {
                    "attempts": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "endedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "inProgress": {
                        "type": "boolean"
                    },
                    "jobId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "jobType": {
                        "type": "string",
                        "enum": [
                            "COLLIBRA_SYNC",
                            "BULK_TAG_ACTION",
                            "DLP_SYNC"
                        ]
                    },
                    "lastModifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "IN_PROGRESS",
                            "ERROR",
                            "COMPLETED"
                        ]
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "submittedByUserId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ElasticsearchQueryGeneratorRequestDto": {
                "required": [
                    "query"
                ],
                "type": "object",
                "properties": {
                    "query": {
                        "$ref": "#/components/schemas/Query"
                    }
                }
            },
            "ExportEnvironmentDiagnosticsRequest": {
                "type": "object",
                "properties": {
                    "logsPeriod": {
                        "type": "string"
                    }
                },
                "description": "Log period in ISO 8601 Duration format.\nEg. for PT12H, logs for the last 12 hours from UTC time, are exported.\nBy default the logs for the last 24 hours are exported."
            },
            "FileSizeStatisticsDTO": {
                "type": "object",
                "properties": {
                    "histogram": {
                        "$ref": "#/components/schemas/HistogramDTOLong"
                    },
                    "mean": {
                        "type": "number",
                        "format": "double"
                    },
                    "median": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "GroupDTO": {
                "type": "object",
                "properties": {
                    "authorities": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "langKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgUnitId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "GroupUpdateDTO": {
                "type": "object",
                "properties": {
                    "activated": {
                        "type": "boolean"
                    },
                    "authorities": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "langKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgUnitId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "HistogramDTOLong": {
                "type": "object",
                "properties": {
                    "buckets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BucketDTOLong"
                        }
                    }
                }
            },
            "HistogramDTOString": {
                "type": "object",
                "properties": {
                    "buckets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BucketDTOString"
                        }
                    }
                }
            },
            "IndexConfigDTO": {
                "required": [
                    "profile_id"
                ],
                "type": "object",
                "properties": {
                    "datasource_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "index_configurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IndexConfigurationDTO"
                        }
                    },
                    "profile_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "IndexConfigFieldsDTO": {
                "type": "object",
                "properties": {
                    "index_config_fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IndexFieldConfigurationDTO"
                        }
                    }
                }
            },
            "IndexConfigurationDTO": {
                "required": [
                    "index_field_id",
                    "index_field_value"
                ],
                "type": "object",
                "properties": {
                    "index_field_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "index_field_value": {
                        "type": "string"
                    }
                }
            },
            "IndexFieldConfigurationDTO": {
                "type": "object",
                "properties": {
                    "index_config_field_default_value": {
                        "type": "string"
                    },
                    "index_config_field_description": {
                        "type": "string"
                    },
                    "index_config_field_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "index_config_field_label": {
                        "type": "string"
                    },
                    "index_config_field_name": {
                        "type": "string"
                    },
                    "index_config_field_value_options": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "index_config_field_value_type": {
                        "type": "string"
                    }
                }
            },
            "InvalidateUserTokensDTO": {
                "required": [
                    "usernames"
                ],
                "type": "object",
                "properties": {
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "JsonNode": {
                "type": "object",
                "description": "queryDsl specifying a search query with PIT"
            },
            "KeyAndPasswordVM": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "newPassword": {
                        "type": "string"
                    }
                }
            },
            "LabelAssignmentStatusDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "UNKNOWN",
                            "NOT_STARTED",
                            "CANCELLED",
                            "FAILED",
                            "QUEUED",
                            "RUNNING",
                            "COMPLETED"
                        ]
                    }
                }
            },
            "LabelStatisticsDTO": {
                "type": "object",
                "properties": {
                    "documentCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "labelId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "labelName": {
                        "type": "string"
                    }
                }
            },
            "LargestDatasourceStatisticsDTO": {
                "type": "object",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceName": {
                        "type": "string"
                    },
                    "documentCount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "LoginVM": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "loginMode": {
                        "type": "string"
                    },
                    "otpCode": {
                        "type": "string"
                    },
                    "password": {
                        "maxLength": 1000,
                        "minLength": 4,
                        "type": "string"
                    },
                    "rememberMe": {
                        "type": "boolean"
                    },
                    "username": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string"
                    }
                }
            },
            "MIPLabelDTO": {
                "type": "object",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "content_formats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "has_protection": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "is_appliable": {
                        "type": "boolean"
                    },
                    "mip_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MIPLabelDTO"
                    },
                    "sensitivity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "smart_label_association_version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "smart_labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagDTO"
                        }
                    },
                    "tooltip": {
                        "type": "string"
                    }
                }
            },
            "MIPLabelTagLiteDTO": {
                "required": [
                    "mip_label_id",
                    "smart_label_ids"
                ],
                "type": "object",
                "properties": {
                    "mip_label_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "smart_label_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "ManagedUserVM": {
                "required": [
                    "login"
                ],
                "type": "object",
                "properties": {
                    "activated": {
                        "type": "boolean"
                    },
                    "authorities": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "email": {
                        "maxLength": 254,
                        "minLength": 5,
                        "type": "string"
                    },
                    "firstName": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "imageUrl": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "langKey": {
                        "maxLength": 10,
                        "minLength": 2,
                        "type": "string"
                    },
                    "lastModifiedBy": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastName": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string"
                    },
                    "login": {
                        "maxLength": 50,
                        "minLength": 1,
                        "pattern": "^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$",
                        "type": "string"
                    },
                    "loginMode": {
                        "type": "string"
                    },
                    "orgUnitId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "password": {
                        "maxLength": 100,
                        "minLength": 4,
                        "type": "string"
                    },
                    "totpEnabled": {
                        "type": "boolean"
                    }
                }
            },
            "MimeType": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "MipLabelVerifyDTO": {
                "required": [
                    "jobUrl"
                ],
                "type": "object",
                "properties": {
                    "jobUrl": {
                        "type": "string"
                    }
                }
            },
            "MultipleTagsDetail": {
                "required": [
                    "datasourceId",
                    "objectId",
                    "tags"
                ],
                "type": "object",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "NamedEntityDTO": {
                "required": [
                    "className",
                    "description",
                    "disableCategory",
                    "modelId",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DataClassDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "className": {
                                "type": "string"
                            },
                            "modelId": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "NlpClientRequestDTO": {
                "required": [
                    "inputText"
                ],
                "type": "object",
                "properties": {
                    "dataClassIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "inputText": {
                        "type": "string"
                    }
                }
            },
            "NlpServerLanguageInfo": {
                "type": "object",
                "properties": {
                    "language_code": {
                        "type": "string"
                    },
                    "model": {
                        "type": "string"
                    }
                }
            },
            "NumberSettingDto": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DxrGlobalSettingDto"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "number",
                                "format": "double"
                            }
                        }
                    }
                ]
            },
            "OnDemandClassifierJobDTO": {
                "type": "object",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceScanId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "error": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "organizationalUnitId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "recrawlDispatchFailures": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "UPLOADING_FILES",
                            "DISPATCHING_RECRAWL_REQUEST",
                            "AWAITING_RECRAWL_TO_COMPLETE",
                            "DISPATCHING_DOCUMENT_CATEGORIZER_JOB",
                            "AWAITING_DOCUMENT_CATEGORIZER_JOB_TO_COMPLETE",
                            "FINISHED",
                            "FAILED"
                        ]
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "submittedByUserId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timeToLive": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "OrganizationalUnitDTO": {
                "required": [
                    "description",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "PairStringString": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "left": {
                        "type": "string"
                    },
                    "right": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "PasswordChangeDTO": {
                "type": "object",
                "properties": {
                    "currentPassword": {
                        "type": "string"
                    },
                    "newPassword": {
                        "type": "string"
                    }
                }
            },
            "ProfileUserPermissionDTO": {
                "required": [
                    "accessLevel",
                    "principalIdentifierId",
                    "profileId"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "principalIdentifierId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "profileId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Query": {
                "type": "object",
                "properties": {
                    "query_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QueryItem"
                        }
                    }
                }
            },
            "QueryItem": {
                "type": "object",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "groupOrder": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "matchStrategy": {
                        "type": "string",
                        "enum": [
                            "EXACT",
                            "EXACT_LIST",
                            "START_WITH",
                            "END_WITH",
                            "CONTAINS",
                            "EXISTS",
                            "GREATER_THAN",
                            "LESSER_THAN",
                            "GREATER_THAN_OR_EQUAL",
                            "LESSER_THAN_OR_EQUAL",
                            "KEYWORD",
                            "RANGE",
                            "AVG",
                            "PERCENTILES",
                            "SCRIPT",
                            "CARDINALITY"
                        ]
                    },
                    "operator": {
                        "type": "string",
                        "enum": [
                            "and",
                            "or",
                            "not"
                        ]
                    },
                    "parameter": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "empty",
                            "text",
                            "number",
                            "boolean",
                            "date",
                            "number_list",
                            "text_list",
                            "date_list"
                        ]
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "RealmAccountDTO": {
                "required": [
                    "accountType",
                    "id",
                    "realmAccountId",
                    "realmKey"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "realmAccountId": {
                        "type": "string"
                    },
                    "realmKey": {
                        "type": "string"
                    }
                },
                "description": "The DTO for the RealmAccount entity."
            },
            "RedactionRuleDTO": {
                "required": [
                    "dataClassId",
                    "enableSecondRedactionInitials",
                    "enableSecondRedactionPlainText",
                    "markupType",
                    "replacementText"
                ],
                "type": "object",
                "properties": {
                    "dataClassId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "enableSecondRedactionInitials": {
                        "type": "boolean"
                    },
                    "enableSecondRedactionPlainText": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "markupType": {
                        "type": "string"
                    },
                    "replacementText": {
                        "type": "string"
                    }
                }
            },
            "RedactionRuleMultiUpdateDTO": {
                "required": [
                    "idList"
                ],
                "type": "object",
                "properties": {
                    "enableSecondRedactionInitials": {
                        "type": "boolean"
                    },
                    "enableSecondRedactionPlainText": {
                        "type": "boolean"
                    },
                    "idList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "markupType": {
                        "type": "string"
                    },
                    "replacementText": {
                        "type": "string"
                    }
                }
            },
            "RedactionRuleSetCloneDTO": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "RedactionRuleSetDTO": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "RedactionRuleSetsDTO": {
                "type": "object",
                "properties": {
                    "redactionRuleIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "redactionRuleSetId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RedactionRuleWithDataClassesDTO": {
                "required": [
                    "dataClassIdList",
                    "redactionRuleSetId"
                ],
                "type": "object",
                "properties": {
                    "dataClassIdList": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "redactionRuleSetId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "whiteList": {
                        "type": "boolean"
                    }
                }
            },
            "RegexDTO": {
                "required": [
                    "description",
                    "disableCategory",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DataClassDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "capturingGroups": {
                                "type": "string"
                            },
                            "validator": {
                                "type": "string",
                                "description": "A validator that can be applied to the output of a regular expression",
                                "enum": [
                                    "LUHN_ALGORITHM",
                                    "JP_MY_NUMBER_PERSONAL_CHECKSUM"
                                ]
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "RegexGroupsDTO": {
                "required": [
                    "regexId"
                ],
                "type": "object",
                "properties": {
                    "capturingGroups": {
                        "type": "string"
                    },
                    "regexId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RegexTestRequestDTO": {
                "required": [
                    "dataStringList",
                    "regex"
                ],
                "type": "object",
                "properties": {
                    "dataStringList": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "regex": {
                        "type": "string"
                    },
                    "validator": {
                        "type": "string",
                        "description": "A validator that can be applied to the output of a regular expression",
                        "enum": [
                            "LUHN_ALGORITHM",
                            "JP_MY_NUMBER_PERSONAL_CHECKSUM"
                        ]
                    }
                }
            },
            "RegexTestResponseDTO": {
                "type": "object",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "realDataAsList": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "RegexValidatorDTO": {
                "required": [
                    "regexId"
                ],
                "type": "object",
                "properties": {
                    "regexId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "validator": {
                        "type": "string",
                        "description": "A validator that can be applied to the output of a regular expression",
                        "enum": [
                            "LUHN_ALGORITHM",
                            "JP_MY_NUMBER_PERSONAL_CHECKSUM"
                        ]
                    }
                }
            },
            "RegexValueDTO": {
                "required": [
                    "regexId"
                ],
                "type": "object",
                "properties": {
                    "regexId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "SavedQueryDto": {
                "required": [
                    "id",
                    "query"
                ],
                "type": "object",
                "properties": {
                    "datasourceIds": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "query": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "reason": {
                        "type": "string",
                        "enum": [
                            "NOT_INDEXED",
                            "INVALID_QUERY",
                            "USER_PAUSED",
                            "NOT_PAUSED",
                            "UPDATING",
                            "ERROR"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "RUNNING",
                            "PAUSED"
                        ]
                    }
                },
                "description": "The SavedQuery dto entity."
            },
            "ScanHistoryItemDTO": {
                "required": [
                    "event",
                    "newState",
                    "timestamp"
                ],
                "type": "object",
                "properties": {
                    "event": {
                        "type": "string",
                        "enum": [
                            "REQUEST_SUBMITTED_EVENT",
                            "CRAWL_STARTED_EVENT",
                            "CRAWL_FAILED_EVENT",
                            "CRAWL_INTERRUPTED_EVENT",
                            "CRAWL_FINISHED_EVENT",
                            "SYSTEM_STARTUP_EVENT",
                            "SYSTEM_SHUTDOWN_EVENT",
                            "DATASOURCE_RESTORED_EVENT",
                            "REDISPATCHED_EVENT",
                            "INDEXING_COMPLETED_EVENT",
                            "DATASOURCE_DELETED_EVENT",
                            "CLEANUP_DATASOURCES_JOB_CREATED_EVENT",
                            "DATASOURCE_SCAN_UPDATED_EVENT",
                            "DATASOURCE_DOCUMENTS_REMOVED_EVENT"
                        ]
                    },
                    "newState": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "CRAWLING",
                            "WAITING_FOR_DATASOURCE_RESTORE",
                            "REDISPATCHING",
                            "WAITING_FOR_INDEXING_TO_COMPLETE",
                            "FINISHED",
                            "REDISPATCHED",
                            "ABORTED"
                        ]
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "SearchableDatasourceDTO": {
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "connectorTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "connectorTypeName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "SettingsProfileCreateDTO": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "datasourcesCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerGroupId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "query": {
                        "$ref": "#/components/schemas/SavedQueryDto"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BASE",
                            "PRIVATE",
                            "PUBLIC"
                        ]
                    }
                }
            },
            "SettingsProfileDTO": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "datasourcesCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "query": {
                        "$ref": "#/components/schemas/SavedQueryDto"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BASE",
                            "PRIVATE",
                            "PUBLIC"
                        ]
                    }
                },
                "description": "The SettingsProfile entity."
            },
            "SettingsProfileDatasourceEntryDTO": {
                "type": "object",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "ONE",
                            "TWO",
                            "THREE",
                            "FOUR"
                        ]
                    },
                    "datasourceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "datasourceName": {
                        "type": "string"
                    },
                    "profileId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "profileName": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BASE",
                            "PRIVATE",
                            "PUBLIC"
                        ]
                    }
                }
            },
            "SortTerm": {
                "type": "object",
                "properties": {
                    "order": {
                        "type": "string",
                        "enum": [
                            "ASCENDING",
                            "DESCENDING"
                        ]
                    },
                    "property": {
                        "type": "string"
                    }
                }
            },
            "StringSettingDto": {
                "required": [
                    "name",
                    "sensitive",
                    "type"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DxrGlobalSettingDto"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SubmitCategorizeDocumentsJobResponse": {
                "type": "object",
                "properties": {
                    "jobId": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "TagDTO": {
                "required": [
                    "hexColor",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "hexColor": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "savedQueryDtoList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SavedQueryDto"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "TagDetails": {
                "required": [
                    "tags"
                ],
                "type": "object",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "TagSetDTO": {
                "required": [
                    "hexColor",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "hexColor": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "TokenSessionDTO": {
                "type": "object",
                "properties": {
                    "date_created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id_token": {
                        "type": "string"
                    }
                }
            },
            "UserDTO": {
                "required": [
                    "login"
                ],
                "type": "object",
                "properties": {
                    "activated": {
                        "type": "boolean"
                    },
                    "authorities": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "email": {
                        "maxLength": 254,
                        "minLength": 5,
                        "type": "string"
                    },
                    "firstName": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "imageUrl": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "langKey": {
                        "maxLength": 10,
                        "minLength": 2,
                        "type": "string"
                    },
                    "lastModifiedBy": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastName": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string"
                    },
                    "login": {
                        "maxLength": 50,
                        "minLength": 1,
                        "pattern": "^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$",
                        "type": "string"
                    },
                    "totpEnabled": {
                        "type": "boolean"
                    }
                }
            },
            "UserWithOrganizationDTO": {
                "required": [
                    "login"
                ],
                "type": "object",
                "properties": {
                    "activated": {
                        "type": "boolean"
                    },
                    "authorities": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "email": {
                        "maxLength": 254,
                        "minLength": 5,
                        "type": "string"
                    },
                    "firstName": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "imageUrl": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "langKey": {
                        "maxLength": 10,
                        "minLength": 2,
                        "type": "string"
                    },
                    "lastModifiedBy": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastName": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string"
                    },
                    "login": {
                        "maxLength": 50,
                        "minLength": 1,
                        "pattern": "^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$",
                        "type": "string"
                    },
                    "loginMode": {
                        "type": "string"
                    },
                    "orgUnitId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totpEnabled": {
                        "type": "boolean"
                    }
                }
            }
        },
        "securitySchemes": {
            "bearer-key": {
                "bearerFormat": "JWT",
                "scheme": "bearer",
                "type": "http"
            }
        }
    }
}
